}
# Crear una lista para almacenar las columnas con medias mayores a 0.75
columnas_altas_media <- c()
# Obtener el número de columnas en datos_filtrados
num_columnas <- ncol(datos_filtrados)
# Recorrer las columnas de la séptima en adelante
for (i in 7:num_columnas) {
# Nombre de la columna actual
nombre_columna <- colnames(datos_filtrados)[i]
# Calcular la media de la columna actual
media_columna <- mean(datos_filtrados[[nombre_columna]])
# Verificar si la media es mayor a 0.75
if (media_columna > 0.5) {
# Agregar el nombre de la columna a la lista
columnas_altas_media <- c(columnas_altas_media, nombre_columna)
}
}
# Imprimir las columnas con medias mayores a 0.75
if (length(columnas_altas_media) > 0) {
cat("Las siguientes columnas tienen una media mayor a 0.75:\n")
print(columnas_altas_media)
} else {
cat("No hay columnas con una media mayor a 0.75.\n")
}
View(datos_comida)
unique(datos_comida$rating)
# Filtrar las filas donde el rating es de 5.0 para tener
# mejor conocimiento de los datos objetivo
datos_filtrados <- datos_comida[datos_comida$rating >= 4.2, ]
# Crear una lista para almacenar las columnas con medias mayores a 0.75
columnas_altas_media <- c()
# Obtener el número de columnas en datos_filtrados
num_columnas <- ncol(datos_filtrados)
# Recorrer las columnas de la séptima en adelante
for (i in 7:num_columnas) {
# Nombre de la columna actual
nombre_columna <- colnames(datos_filtrados)[i]
# Calcular la media de la columna actual
media_columna <- mean(datos_filtrados[[nombre_columna]])
# Verificar si la media es mayor a 0.75
if (media_columna > 0.5) {
# Agregar el nombre de la columna a la lista
columnas_altas_media <- c(columnas_altas_media, nombre_columna)
}
}
# Imprimir las columnas con medias mayores a 0.75
if (length(columnas_altas_media) > 0) {
cat("Las siguientes columnas tienen una media mayor a 0.75:\n")
print(columnas_altas_media)
} else {
cat("No hay columnas con una media mayor a 0.75.\n")
}
# Recorrer las columnas de la séptima en adelante
for (i in 7:num_columnas) {
# Nombre de la columna actual
nombre_columna <- colnames(datos_filtrados)[i]
# Calcular la media de la columna actual
media_columna <- mean(datos_filtrados[[nombre_columna]])
# Verificar si la media es mayor a 0.75
if (media_columna > 0.7) {
# Agregar el nombre de la columna a la lista
columnas_altas_media <- c(columnas_altas_media, nombre_columna)
}
}
# Imprimir las columnas con medias mayores a 0.75
if (length(columnas_altas_media) > 0) {
cat("Las siguientes columnas tienen una media mayor a 0.75:\n")
print(columnas_altas_media)
} else {
cat("No hay columnas con una media mayor a 0.75.\n")
}
# Recorrer las columnas de la séptima en adelante
for (i in 7:num_columnas) {
# Nombre de la columna actual
nombre_columna <- colnames(datos_filtrados)[i]
# Calcular la media de la columna actual
media_columna <- mean(datos_filtrados[[nombre_columna]])
# Verificar si la media es mayor a 0.75
if (media_columna > 0.7) {
# Agregar el nombre de la columna a la lista
print(media_columna)
columnas_altas_media <- c(columnas_altas_media, nombre_columna)
}
}
# Imprimir las columnas con medias mayores a 0.75
if (length(columnas_altas_media) > 0) {
cat("Las siguientes columnas tienen una media mayor a 0.75:\n")
print(columnas_altas_media)
} else {
cat("No hay columnas con una media mayor a 0.75.\n")
}
# Crear una lista para almacenar las columnas con medias mayores a 0.75
columnas_altas_media <- c()
# Obtener el número de columnas en datos_filtrados
num_columnas <- ncol(datos_filtrados)
# Recorrer las columnas de la séptima en adelante
for (i in 7:num_columnas) {
# Nombre de la columna actual
nombre_columna <- colnames(datos_filtrados)[i]
# Calcular la media de la columna actual
media_columna <- mean(datos_filtrados[[nombre_columna]])
# Verificar si la media es mayor a 0.75
if (media_columna > 0.7) {
# Agregar el nombre de la columna a la lista
print(media_columna)
columnas_altas_media <- c(columnas_altas_media, nombre_columna)
}
}
# Imprimir las columnas con medias mayores a 0.75
if (length(columnas_altas_media) > 0) {
cat("Las siguientes columnas tienen una media mayor a 0.75:\n")
print(columnas_altas_media)
} else {
cat("No hay columnas con una media mayor a 0.75.\n")
}
# Crear una lista para almacenar las columnas con medias mayores a 0.75
columnas_altas_media <- c()
# Obtener el número de columnas en datos_filtrados
num_columnas <- ncol(datos_filtrados)
# Recorrer las columnas de la séptima en adelante
for (i in 7:num_columnas) {
# Nombre de la columna actual
nombre_columna <- colnames(datos_filtrados)[i]
# Calcular la media de la columna actual
media_columna <- mean(datos_filtrados[[nombre_columna]])
# Verificar si la media es mayor a 0.75
if (media_columna > 0.5) {
# Agregar el nombre de la columna a la lista
print(media_columna)
columnas_altas_media <- c(columnas_altas_media, nombre_columna)
}
}
# Imprimir las columnas con medias mayores a 0.75
if (length(columnas_altas_media) > 0) {
cat("Las siguientes columnas tienen una media mayor a 0.75:\n")
print(columnas_altas_media)
} else {
cat("No hay columnas con una media mayor a 0.75.\n")
}
# Crear una versión limpia de datos_filtrados sin las columnas innecesarias
datos_limpios <- subset(datos_comida, select = 1:6, 'bon.appétit')
# Crear una versión limpia de datos_filtrados sin las columnas innecesarias
datos_limpios <- subset(datos_comida, select = (1:6, 'bon.appétit'))
library("dplyr")
library(dplyr)
# Crear una versión limpia de datos_filtrados sin las columnas innecesarias
datos_limpios <- datos_comida %>% select(1:6, `bon.appétit`)
# Eliminar filas con NA en las columnas relevantes
datos_limpios <- datos_limpios[complete.cases(datos_limpios[, c('calories', 'protein', 'fat', 'sodium')]), ]
# Filtrar los datos para incluir solo aquellos dentro del cuantil 95
datos_limpios_cuantil_95 <- datos_limpios[apply(datos_limpios[, 3:ncol(datos_limpios)], 1, function(row) {
all(row <= 1407)
}), ]
# Mostrar un resumen descriptivo de las variables
summary(datos_limpios_cuantil_95)
# Crear un histograma para las calorías
ggplot(datos_limpios_cuantil_95, aes(x = calories)) +
geom_histogram(binwidth = 50, fill = "skyblue", color = "black") +
labs(title = "Distribución de Calorías")
# Crear un histograma para la proteína
ggplot(datos_limpios_cuantil_95, aes(x = protein)) +
geom_histogram(binwidth = 5, fill = "lightgreen", color = "black") +
labs(title = "Distribución de Proteína")
# Crear un histograma para la grasa
ggplot(datos_limpios_cuantil_95, aes(x = fat)) +
geom_histogram(binwidth = 5, fill = "salmon", color = "black") +
labs(title = "Distribución de Grasa")
# Ajustar el modelo de regresión lineal Todas las variables
modelo <- lm(rating ~ bon, data = datos_limpios_cuantil_95)
# Crear un histograma para las calorías
ggplot(datos_limpios_cuantil_95, aes(x = calories)) +
geom_histogram(binwidth = 50, fill = "skyblue", color = "black") +
labs(title = "Distribución de Calorías")
# Crear un histograma para la proteína
ggplot(datos_limpios_cuantil_95, aes(x = protein)) +
geom_histogram(binwidth = 5, fill = "lightgreen", color = "black") +
labs(title = "Distribución de Proteína")
# Crear un histograma para la grasa
ggplot(datos_limpios_cuantil_95, aes(x = fat)) +
geom_histogram(binwidth = 5, fill = "salmon", color = "black") +
labs(title = "Distribución de Grasa")
# Gráfico de boxplot para sodium vs rating
ggplot(datos_limpios_cuantil_95, aes(x = as.factor(rating), y = sodium)) +
geom_boxplot(fill = "blue", alpha = 0.5) +
labs(title = "Sodium vs Rating",
x = "Rating",
y = "Sodium") +
theme_minimal()
ggplot(datos_limpios_cuantil_95, aes(x = as.factor(rating), y = fat)) +
geom_boxplot(fill = "blue", alpha = 0.5) +
labs(title = "Fat vs Rating",
x = "Rating",
y = "Fat") +
theme_minimal()
# Crear el gráfico de dispersión
ggplot(datos_comida, aes(x = rating, y = fat, color = `bon.appétit`)) +
geom_point() +
labs(title = "Scatter Plot of Rating vs. Fat",
x = "Rating",
y = "Fat") +
theme_minimal()
# Crear el gráfico de dispersión
ggplot(datos_limpios_cuantil_95, aes(x = rating, y = fat, color = `bon.appétit`)) +
geom_point() +
labs(title = "Scatter Plot of Rating vs. Fat",
x = "Rating",
y = "Fat") +
theme_minimal()
# Crear el gráfico de dispersión
ggplot(datos_limpios_cuantil_95, aes(x = as.factor(rating), y = fat, color = `bon.appétit`)) +
geom_point() +
labs(title = "Scatter Plot of Rating vs. Fat",
x = "Rating",
y = "Fat") +
theme_minimal()
# Crear el gráfico de dispersión
ggplot(datos_limpios_cuantil_95, aes(x = as.factor(rating), y = calories, color = `bon.appétit`)) +
geom_point() +
labs(title = "Scatter Plot of Rating vs. Fat",
x = "Rating",
y = "Fat") +
theme_minimal()
# Crear el gráfico de dispersión
ggplot(datos_limpios_cuantil_95, aes(x = as.factor(rating), y = calories, color = `fat`)) +
geom_point() +
labs(title = "Scatter Plot of Rating vs. Fat",
x = "Rating",
y = "Fat") +
theme_minimal()
# Crear el gráfico de dispersión
ggplot(datos_limpios_cuantil_95, aes(x = calories, y = fat, color = `rating`)) +
geom_point() +
labs(title = "Scatter Plot of Rating vs. Fat",
x = "Rating",
y = "Fat") +
theme_minimal()
# Crear el gráfico de dispersión
ggplot(datos_limpios_cuantil_95, aes(x = calories, y = fat, color = `rating`)) +
geom_point() +
labs(title = "Scatter Plot of Rating vs. Fat",
x = "calories",
y = "Fat") +
theme_minimal()
# Crear el gráfico de dispersión
ggplot(datos_filtrados, aes(x = as.factor(rating), y = fat, color = `bon.appétit`)) +
geom_point() +
labs(title = "Scatter Plot of Rating vs. Fat",
x = "Rating",
y = "Fat") +
theme_minimal()
datos_comida %>% complete.cases(datos_limpios[, c('calories', 'protein', 'fat', 'sodium')
datos_comida %>% complete.cases(datos_limpios[, c('calories', 'protein', 'fat', 'sodium')])
datos_comida %>% complete.cases(datos_limpios[, c('calories', 'protein', 'fat', 'sodium')])
datos_comida <- datos_comida[complete.cases(datos_limpios[, c('calories', 'protein', 'fat', 'sodium')])]
datos_comida <- datos_comida[complete.cases(datos_comida[, c('calories', 'protein', 'fat', 'sodium')])]
datos_comida <- datos_comida[complete.cases(datos_comida[, c('calories', 'protein', 'fat', 'sodium')])]
datos_comida_limpio <- datos_comida[complete.cases(datos_comida[, c('calories', 'protein', 'fat', 'sodium')])]
datos_filtrados <- datos_comida[datos_limpios_cuantil_95$rating >= 4.2, ]
# Crear el gráfico de dispersión
ggplot(datos_filtrados, aes(x = calories, y = fat, color = `rating`)) +
geom_point() +
labs(title = "Scatter Plot of Rating vs. Fat",
x = "calories",
y = "Fat") +
theme_minimal()
datos_filtrados <- datos_comida[datos_limpios_cuantil_95$rating >= 4.2, ]
View(datos_filtrados)
datos_filtrados <- datos_comida[datos_limpios_cuantil_95$rating >= 4.2, ]
datos_filtrados <- datos_limpios_cuantil_95[datos_limpios_cuantil_95$rating >= 4.2, ]
# Crear el gráfico de dispersión
ggplot(datos_filtrados, aes(x = calories, y = fat, color = `rating`)) +
geom_point() +
labs(title = "Scatter Plot of Rating vs. Fat",
x = "calories",
y = "Fat") +
theme_minimal()
datos_filtrados <- datos_limpios_cuantil_95[datos_limpios_cuantil_95$rating >= 5, ]
# Crear el gráfico de dispersión
ggplot(datos_filtrados, aes(x = calories, y = fat, color = `rating`)) +
geom_point() +
labs(title = "Scatter Plot of Rating vs. Fat",
x = "calories",
y = "Fat") +
theme_minimal()
# Crear el gráfico de dispersión
ggplot(datos_filtrados, aes(x = as.factor(rating), y = fat, color = `bon.appétit`)) +
geom_point() +
labs(title = "Scatter Plot of Rating vs. Fat",
x = "Rating",
y = "Fat") +
theme_minimal()
# Crear el gráfico de dispersión
ggplot(datos_filtrados, aes(x = sodium, y = fat, color = `bon.appétit`)) +
geom_point() +
labs(title = "Scatter Plot of Rating vs. Fat",
x = "Rating",
y = "Fat") +
theme_minimal()
# Crear el gráfico de dispersión
ggplot(datos_filtrados, aes(x = sodium, y = calories, color = `bon.appétit`)) +
geom_point() +
labs(title = "Scatter Plot of Rating vs. Fat",
x = "Rating",
y = "Fat") +
theme_minimal()
# Seleccionar la columna 'rating' y las columnas binarias (de la columna 7 en adelante)
datos_binarios <- datos_comida %>%
select(rating, everything(), 7:ncol(datos_comida))
# Verificar la estructura del dataframe
str(datos_binarios)
# Crear la tabla de recuentos
tabla_recuento <- datos_binarios %>%
gather(key = "variable", value = "value", -rating) %>%
group_by(rating, variable) %>%
summarise(recuento = sum(value)) %>%
spread(key = "variable", value = "recuento", fill = 0)
library(tydyr)
install.packages("tidyr")
install.packages("tidyr")
library(dplyr)
library(tidyr)
# Crear la tabla de recuentos
tabla_recuento <- datos_binarios %>%
gather(key = "variable", value = "value", -rating) %>%
group_by(rating, variable) %>%
summarise(recuento = sum(value)) %>%
spread(key = "variable", value = "recuento", fill = 0)
rlang::last_trace()
rlang::last_trace(drop = FALSE)
datos_comida[7:ncol(datos_comida)] <- lapply(datos_comida[7:ncol(datos_comida)], as.numeric)
# Seleccionar la columna 'rating' y las columnas binarias (de la columna 7 en adelante)
datos_binarios <- datos_comida %>%
select(rating, 7:ncol(datos_comida))
# Verificar la estructura del dataframe
str(datos_binarios)
# Crear la tabla de recuentos
tabla_recuento <- datos_binarios %>%
gather(key = "variable", value = "value", -rating) %>%
group_by(rating, variable) %>%
summarise(recuento = sum(value, na.rm = TRUE)) %>%
spread(key = "variable", value = "recuento", fill = 0)
# Verificar el resultado
print(tabla_recuento)
View(tabla_recuento)
ggplot(tabla_recuento, aes(x = as.factor(rating), y = bon.appétit)) +
geom_boxplot(fill = "blue", alpha = 0.5) +
labs(title = "Fat vs Rating",
x = "Rating",
y = "Fat") +
theme_minimal()
filtro_columnas <- function(df) {
df %>% select_if(function(col) sum(col[1:6], na.rm = TRUE) < sum(col[(nrow(df)-1):nrow(df)], na.rm = TRUE))
}
# Aplicar la función al dataframe
datos_filtrados <- filtro_columnas(datos_comida)
# Verificar el resultado
str(datos_filtrados)
filtro_columnas <- function(df) {
df %>% select_if(function(col) sum(col[1:6], na.rm = TRUE) < sum(col[(nrow(df)-1):nrow(df)], na.rm = TRUE))
}
# Aplicar la función al dataframe
datos_filtrados <- filtro_columnas(datos_comida)
# Verificar el resultado
str(datos_filtrados)
View(tabla_recuento)
# Aplicar la función al dataframe
datos_filtrados <- filtro_columnas(datos_comida)
# Crear una función que verifica la condición
filtro_columnas <- function(df) {
df %>% select_if(function(col) sum(col[1:6], na.rm = TRUE) < sum(col[(nrow(df)-1):nrow(df)], na.rm = TRUE))
}
# Crear una función que verifica la condición
filtro_columnas <- function(df) {
df %>% select_if(function(col) sum(col[1:6], na.rm = TRUE) < sum(col[(nrow(df)-1):nrow(df)], na.rm = TRUE))
}
# Aplicar la función al dataframe
datos_filtrados <- filtro_columnas(datos_comida)
# Verificar el resultado
str(datos_filtrados)
# Crear una función que verifica la condición
filtro_columnas <- function(df) {
df %>% select_if(function(col) sum(col[1:6], na.rm = TRUE) < sum(col[(nrow(df)-1):nrow(df)], na.rm = TRUE))
}
# Aplicar la función al dataframe
datos_filtrados <- filtro_columnas(datos_comida)
# Convertir columnas a numéricas si es posible y aplicar el filtro
filtro_columnas <- function(df) {
# Convertir columnas a numéricas si es posible
df <- df %>% mutate(across(everything(), ~ suppressWarnings(as.numeric(.)), .names = "num_{col}"))
# Filtrar solo las columnas convertidas a numéricas
df_num <- df %>% select(starts_with("num_"))
# Aplicar la condición de filtrado
df_num %>% select_if(function(col) sum(col[1:6], na.rm = TRUE) < sum(col[(nrow(df_num)-1):nrow(df_num)], na.rm = TRUE))
}
# Aplicar la función al dataframe
datos_filtrados <- filtro_columnas(datos_comida)
# Verificar el resultado
str(datos_filtrados)
View(tabla_recuento)
View(datos_filtrados)
# Convertir columnas a numéricas si es posible y aplicar el filtro
filtro_columnas <- function(df) {
# Convertir columnas a numéricas si es posible
df <- df %>% mutate(across(everything(), ~ suppressWarnings(as.numeric(.)), .names = "num_{col}"))
# Filtrar solo las columnas convertidas a numéricas
df_num <- df %>% select(starts_with("num_"))
# Aplicar la condición de filtrado
df_num %>% select_if(function(col) sum(col[1:6], na.rm = TRUE) < sum(col[(nrow(df_num)-1):nrow(df_num)], na.rm = TRUE))
}
# Aplicar la función al dataframe
datos_filtrados <- filtro_columnas(tabla_recuento)
# Verificar el resultado
str(datos_filtrados)
View(datos_filtrados)
# Añadir una columna con la suma de las otras filas por columna
datos_filtrados <- datos_filtrados %>%
mutate(suma_filas = rowSums(select(., -rating)))  # Excluye la columna 'rating' y 'bon.appétit' de la suma
# Imprimir el promedio
print(promedio_suma_filas)
# Añadir una columna con la suma de las otras filas por columna
datos_filtrados <- datos_filtrados %>%
mutate(suma_filas = rowSums(select(., -rating)))  # Excluye la columna 'rating' y 'bon.appétit' de la suma
# Calcular la suma de cada columna numérica
sum_columnas <- colSums(datos_filtrados[, sapply(datos_filtrados, is.numeric)], na.rm = TRUE)
# Crear una nueva fila con la suma de cada columna
nueva_fila <- c(sum_columnas, NA)  # Agregar un NA al final para mantener la estructura del dataframe
# Agregar la nueva fila al dataframe
datos_filtrados <- rbind(datos_filtrados, nueva_fila)
nueva_fila
sum_columnas <- colSums(datos_filtrados[, sapply(datos_filtrados, is.numeric)], na.rm = TRUE)
nueva_fila <- data.frame(matrix(sum_columnas, nrow = 1))
colnames(nueva_fila) <- colnames(datos_filtrados)[sapply(datos_filtrados, is.numeric)]
nueva_fila <- nueva_fila[colnames(datos_filtrados)]
datos_filtrados <- bind_rows(datos_filtrados, nueva_fila)
promedio_suma_filas <- mean(as.numeric(nueva_fila[1, sapply(nueva_fila, is.numeric)]), na.rm = TRUE)
promedio_suma_filas
View(datos_filtrados)
datos_filtrados
# Calcular la suma de cada columna numérica (sin incluir la columna 'rating')
sum_columnas <- colSums(datos_filtrados[, sapply(datos_filtrados, is.numeric) & colnames(datos_filtrados) != "rating"], na.rm = TRUE)
# Añadir una fila con la suma de cada columna
datos_filtrados <- bind_rows(datos_filtrados, data.frame(t(sum_columnas)))
# Calcular el promedio de la fila de sumas
promedio_suma_filas <- mean(sum_columnas, na.rm = TRUE)
# Filtrar las columnas que tienen un valor en la última fila mayor o igual que el promedio_suma_filas o que son 'rating'
columnas_filtradas <- names(datos_filtrados)[sapply(datos_filtrados[nrow(datos_filtrados), ], function(x) as.numeric(x) >= promedio_suma_filas | names(x) == "rating")]
# Filtrar el dataframe para mantener solo las columnas seleccionadas
datos_filtrados <- datos_filtrados[, columnas_filtradas]
# Remover la última fila ya que solo la necesitamos para el filtro
datos_filtrados <- datos_filtrados[-nrow(datos_filtrados), ]
# Calcular la suma de cada columna numérica (sin incluir la columna 'rating')
sum_columnas <- colSums(datos_filtrados[, sapply(datos_filtrados, is.numeric) & colnames(datos_filtrados) != "rating"], na.rm = TRUE)
# Añadir una fila con la suma de cada columna
datos_filtrados <- bind_rows(datos_filtrados, data.frame(t(sum_columnas)))
# Filtrar las columnas que tienen un valor en la última fila mayor o igual que el promedio_suma_filas o que son 'rating'
columnas_filtradas <- names(datos_filtrados)[sapply(datos_filtrados[nrow(datos_filtrados), ], function(x) (is.numeric(x) && x >= promedio_suma_filas) | names(datos_filtrados) == "rating")]
# Calcular el promedio de la fila de sumas
promedio_suma_filas <- mean(sum_columnas, na.rm = TRUE)
# Filtrar el dataframe para mantener solo las columnas seleccionadas
datos_filtrados <- datos_filtrados[, columnas_filtradas, drop = FALSE]
# Calcular la suma de cada columna numérica (sin incluir la columna 'rating')
sum_columnas <- colSums(datos_filtrados[, sapply(datos_filtrados, is.numeric) & colnames(datos_filtrados) != "rating"], na.rm = TRUE)
# Calcular el promedio de la fila de sumas
promedio_suma_filas <- mean(sum_columnas, na.rm = TRUE)
# Añadir una fila con la suma de cada columna
datos_filtrados <- bind_rows(datos_filtrados, data.frame(t(sum_columnas)))
# Filtrar las columnas que tienen un valor en la última fila mayor o igual que el promedio_suma_filas o que son 'rating'
columnas_filtradas <- names(datos_filtrados)[sapply(datos_filtrados[nrow(datos_filtrados), ], function(x) (is.numeric(x) && x >= promedio_suma_filas) | names(datos_filtrados) == "rating")]
# Filtrar el dataframe para mantener solo las columnas seleccionadas
datos_filtrados <- datos_filtrados[, columnas_filtradas, drop = FALSE]
View(datos_filtrados)
# Convertir columnas a numéricas si es posible y aplicar el filtro
filtro_columnas <- function(df) {
# Convertir columnas a numéricas si es posible
df <- df %>% mutate(across(everything(), ~ suppressWarnings(as.numeric(.)), .names = "num_{col}"))
# Filtrar solo las columnas convertidas a numéricas
df_num <- df %>% select(starts_with("num_"))
# Aplicar la condición de filtrado
df_num %>% select_if(function(col) sum(col[1:6], na.rm = TRUE) < sum(col[(nrow(df_num)-1):nrow(df_num)], na.rm = TRUE))
}
# Aplicar la función al dataframe
datos_filtrados <- filtro_columnas(tabla_recuento)
# Verificar el resultado
str(datos_filtrados)
View(datos_limpios)
sum_columnas <- colSums(datos_filtrados[, sapply(datos_filtrados, is.numeric)], na.rm = TRUE)
nueva_fila <- data.frame(matrix(sum_columnas, nrow = 1))
colnames(nueva_fila) <- colnames(datos_filtrados)[sapply(datos_filtrados, is.numeric)]
nueva_fila <- nueva_fila[colnames(datos_filtrados)]
datos_filtrados <- bind_rows(datos_filtrados, nueva_fila)
# Excluir la primera columna
datos_sin_primera_columna <- select(datos_filtrados, -1)
# Seleccionar las columnas cuyo valor en la fila 9 (considerando las columnas excluyendo la primera) sea menor a 500
columnas_seleccionadas <- names(datos_sin_primera_columna[, 9][datos_sin_primera_columna[9, ] < 500])
# Seleccionar las columnas cuyo valor en la fila 9 sea menor a 500
columnas_seleccionadas <- names(datos_filtrados[, 9][datos_filtrados[9,] < 500])
# Filtrar el dataframe para mantener solo las columnas seleccionadas
datos_filtrados <- select(datos_filtrados, all_of(columnas_seleccionadas))
# Verificar el resultado
print(datos_filtrados)
# Excluir la primera columna
datos_sin_primera_columna <- select(datos_filtrados, -1)
# Convertir la fila 9 del dataframe a un vector
fila_9 <- unlist(datos_sin_primera_columna[9, ])
# Seleccionar las columnas cuyo valor en la fila 9 (considerando las columnas excluyendo la primera) sea menor a 500
columnas_seleccionadas <- names(datos_sin_primera_columna[, 9][fila_9 < 500])
# Filtrar el dataframe para mantener solo las columnas seleccionadas
datos_filtrados <- select(datos_filtrados, all_of(columnas_seleccionadas))
# Verificar el resultado
print(datos_filtrados)
# Seleccionar las columnas cuyo valor en la fila 9 sea menor a 500
columnas_seleccionadas <- names(datos_filtrados[, 9][datos_filtrados[9,] < 500])
