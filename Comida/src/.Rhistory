library(MAAS)
library(MAAS)
library(MASS)
library(dplyr)
medias <- c(10,15,12)
varianzas_covarianzas <- matrix(c(10,8,7,
8,11,9,
7,9,15), byrow = TRUE, ncol = 3)
n <- 10
datos_simulados <- mvrnorm(n, medias, varianzas_covarianzas)
apply(datos_simulados,2, mean)
cor(datos_simulados)
library(MASS)
library(dplyr)
medias <- c(10,15,12)
varianzas_covarianzas <- matrix(c(10,8,7,
8,11,9,
7,9,15), byrow = TRUE, ncol = 3)
n <- 10
datos_simulados <- mvrnorm(n, medias, varianzas_covarianzas) %>%  data.frame()
apply(datos_simulados,2, mean)
cor(datos_simulados)
datos_simulado
datos_simulados <- mvrnorm(n, medias, varianzas_covarianzas) %>%  data.frame()
library(MASS)
library(dplyr)
medias <- c(10,15,12)
varianzas_covarianzas <- matrix(c(10,8,7,
8,11,9,
7,9,15), byrow = TRUE, ncol = 3)
n <- 10
datos_simulados <- mvrnorm(n, medias, varianzas_covarianzas) %>%  data.frame()
apply(datos_simulados,2, mean)
cor(datos_simulados)
library(MASS)
library(dplyr)
medias <- c(10,15,12)
varianzas_covarianzas <- matrix(c(10,8,7,
8,11,9,
7,9,15), byrow = TRUE, ncol = 3)
n <- 10
datos_simulados <- mvrnorm(n, medias, varianzas_covarianzas) %>%  data.frame()
apply(datos_simulados,2, mean)
cor(datos_simulados)
library(MASS)
library(dplyr)
medias <- c(10,15,12)
varianzas_covarianzas <- matrix(c(10,8,7,
8,11,9,
7,9,15), byrow = TRUE, ncol = 3)
n <- 10
datos_simulados <- mvrnorm(n, medias, varianzas_covarianzas) %>%  data.frame()
apply(datos_simulados,2, mean)
cor(datos_simulados)
datos_simulados
datos_simulados
# Gráfico 1
ggplot(datos_simulados, aes(x = X1, y = X2)) +
geom_point(color = "blue", size = 3) +
labs(title = "Gráfico X1 vs X2",
x = "X1", y = "X2") +
theme_minimal()
library(ggplot2)
# Gráfico 1
ggplot(datos_simulados, aes(x = X1, y = X2)) +
geom_point(color = "blue", size = 3) +
labs(title = "Gráfico X1 vs X2",
x = "X1", y = "X2") +
theme_minimal()
library(ggplot2)
library(ggplot2)
# Gráfico 1
ggplot(datos_simulados, aes(x = X1, y = X2)) +
geom_point(color = "blue", size = 3) +
labs(title = "Gráfico X1 vs X2",
x = "X1", y = "X2") +
theme_minimal()
datos_simulados <- mvrnorm(n, medias, varianzas_covarianzas) %>%  data.frame()
apply(datos_simulados,2, mean)
cor(datos_simulados)
# Gráfico 1
ggplot(datos_simulados, aes(x = X1, y = X2)) +
geom_point(color = "blue", size = 3) +
labs(title = "Gráfico X1 vs X2",
x = "X1", y = "X2") +
theme_minimal()
n <- 100
datos_simulados <- mvrnorm(n, medias, varianzas_covarianzas) %>%  data.frame()
apply(datos_simulados,2, mean)
cor(datos_simulados)
# Gráfico 1
ggplot(datos_simulados, aes(x = X1, y = X2)) +
geom_point(color = "blue", size = 3) +
labs(title = "Gráfico X1 vs X2",
x = "X1", y = "X2") +
theme_minimal()
# Gráfico 2
ggplot(datos_simulados, aes(x = X2, y = X3)) +
geom_point(color = "green", size = 3) +
labs(title = "Gráfico X2 vs X3",
x = "X2", y = "X3") +
theme_minimal()
# Gráfico 3
ggplot(datos_simulados, aes(x = X3, y = X1)) +
geom_point(color = "red", size = 3) +
labs(title = "Gráfico X3 vs X1",
x = "X3", y = "X1") +
theme_minimal()
medias <- c(2, 5, 1.2)
varianzas_covarianzas <- matrix(c(1, 0.8, 0.7,
0.8, 1.1, 0.9,
0.7, 0.9, 1.3), byrow = TRUE, ncol = 3)
n <- 100
datos_simulados_2 <- mvrnorm(n, medias_2, varianzas_covarianzas_2) %>% data.frame()
n <- 100
datos_simulados_2 <- mvrnorm(n, medias_2, varianzas_covarianzas_2) %>% data.frame()
n <- 100
datos_simulados_2 <- mvrnorm(n, medias_2, varianzas_covarianzas_2) %>% data.frame()
medias2 <- c(2, 5, 1.2)
varianzas_covarianzas <- matrix(c(1, 0.8, 0.7,
0.8, 1.1, 0.9,
0.7, 0.9, 1.3), byrow = TRUE, ncol = 3)
n <- 100
datos_simulados_2 <- mvrnorm(n, medias_2, varianzas_covarianzas_2) %>% data.frame()
medias2 <- c(2, 5, 1.2)
varianzas_covarianzas_2 <- matrix(c(1, 0.8, 0.7,
0.8, 1.1, 0.9,
0.7, 0.9, 1.3), byrow = TRUE, ncol = 3)
n <- 100
datos_simulados_2 <- mvrnorm(n, medias_2, varianzas_covarianzas_2) %>% data.frame()
medias_2 <- c(2, 5, 1.2)
varianzas_covarianzas_2 <- matrix(c(1, 0.8, 0.7,
0.8, 1.1, 0.9,
0.7, 0.9, 1.3), byrow = TRUE, ncol = 3)
n <- 100
datos_simulados_2 <- mvrnorm(n, medias_2, varianzas_covarianzas_2) %>% data.frame()
apply(datos_simulados_2, 2, mean)
cor(datos_simulados)
datos_simulados1[, 'grupo'] <- 'G1'
n <- 100
datos_simulados1 <- mvrnorm(n, medias, varianzas_covarianzas) %>%  data.frame()
datos_kmeans
#Simular otro conjunto de datos pero ahora con medias
medias_2 <- c(2, 5, 1.2)
varianzas_covarianzas_2 <- matrix(c(1, 0.8, 0.7,
0.8, 1.1, 0.9,
0.7, 0.9, 1.3), byrow = TRUE, ncol = 3)
n <- 100
datos_simulados_2 <- mvrnorm(n, medias_2, varianzas_covarianzas_2) %>% data.frame()
apply(datos_simulados_2, 2, mean)
cor(datos_simulados)
datos_simulados1[, 'grupo'] <- 'G1'
datos_simulados_2[, 'grupo'] <- 'G2'
datos_kmeans <- bind_rows(datos_simulados1, datos_simulados_2)
datos_kmeans
quantile(datos_limpios$calories, 0.95)
#install.packages("summarytools")
library(summarytools)
library(ggplot2)
getwd()
setwd("C:/Users/sofia/Documents/Hackaton Datos/Comida/src/")
datos_comida <- read.csv("../input/epi_r.csv")
colnames(datos_comida)
unique(datos_comida)
# Filtrar las filas donde 'calories' es mayor que 500
datos_filtrados <- datos_comida[datos_comida$rating == 5.0, ]
# Crear una lista para almacenar las columnas con medias mayores a 0.75
columnas_altas_media <- c()
# Obtener el número de columnas en datos_filtrados
num_columnas <- ncol(datos_filtrados)
# Recorrer las columnas de la séptima en adelante
for (i in 7:num_columnas) {
# Nombre de la columna actual
nombre_columna <- colnames(datos_filtrados)[i]
# Calcular la media de la columna actual
media_columna <- mean(datos_filtrados[[nombre_columna]])
# Verificar si la media es mayor a 0.75
if (media_columna > 0.75) {
# Agregar el nombre de la columna a la lista
columnas_altas_media <- c(columnas_altas_media, nombre_columna)
}
}
# Imprimir las columnas con medias mayores a 0.75
if (length(columnas_altas_media) > 0) {
cat("Las siguientes columnas tienen una media mayor a 0.75:\n")
print(columnas_altas_media)
} else {
cat("No hay columnas con una media mayor a 0.75.\n")
}
# Crear una versión limpia de datos_filtrados sin las columnas innecesarias
datos_limpios <- subset(datos_filtrados, select = 1:6)
# Mostrar las primeras filas de datos_limpios para verificar
head(datos_limpios)
# Eliminar filas con NA en las columnas relevantes
datos_limpios <- datos_limpios[complete.cases(datos_limpios[, c('calories', 'protein', 'fat', 'sodium')]), ]
# Crear un histograma para las calorías
ggplot(datos_limpios, aes(x = calories)) +
geom_histogram(binwidth = 50, fill = "skyblue", color = "black") +
labs(title = "Distribución de Calorías")
# Crear un histograma para la proteína
ggplot(datos_limpios, aes(x = protein)) +
geom_histogram(binwidth = 5, fill = "lightgreen", color = "black") +
labs(title = "Distribución de Proteína")
quantile(datos_limpios$calories, 0.95)
datos_limpios2 <- datos_limpios[datos_limpios$calories < 1407]
# Filtrar los datos para incluir solo aquellos dentro del cuantil 95
datos_limpios_cuantil_95 <- datos_limpios[apply(datos_limpios[, 3:ncol(datos_limpios)], 1, function(row) {
all(row <= 1407)
}), ]
View(datos_limpios_cuantil_95)
View(datos_simulados)
