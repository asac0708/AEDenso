valores_repetidos <- valores_conteo[valores_conteo > 1]
# Imprimir los valores repetidos y sus conteos
print(valores_repetidos)
# Establecer Country.Code como nombres de fila
rownames(tabla_unida) <- tabla_unida$Country.Code
# Eliminar la columna Country.Code si ya no la necesitas
tabla_unida <- tabla_unida[ , !names(tabla_unida) %in% "Country.Code"]
# Mostrar las primeras filas para verificar
head(tabla_unida)
View(tabla_unida)
rep_energia_renovable <- rep_energia_renovable %>% select(-Country.Name)
View(energia_renovable)
# Eliminar la columna Country.Name usando indexación básica de R
rep_energia_renovable <- rep_energia_renovable[, !(names(rep_energia_renovable) %in% "Country.Name")]
View(rep_energia_renovable)
rep_energia_fosil <- rep_energia_fosil[, !(names(rep_energia_fosil) %in% "Country.Name")]
rep_emisiones_co2 <- rep_emisiones_co2[, !(names(rep_emisiones_co2) %in% "Country.Name")]
rep_electric_consumption <- rep_electric_consumption[, !(names(rep_electric_consumption) %in% "Country.Name")]
# Usar Reduce y merge para unir todas las tablas mediante las columnas Country.Code y Country.Name
tabla_unida <- Reduce(function(x, y) merge(x, y, by = c("Country.Code"), all = TRUE), tablas)
# Eliminar la columna Country.Name usando indexación básica de R
rep_energia_renovable <- rep_energia_renovable[, !(names(rep_energia_renovable) %in% "Country.Name")]
rep_energia_fosil <- rep_energia_fosil[, !(names(rep_energia_fosil) %in% "Country.Name")]
#rep_emisiones_co2 <- rep_emisiones_co2[, !(names(rep_emisiones_co2) %in% "Country.Name")]
rep_electric_consumption <- rep_electric_consumption[, !(names(rep_electric_consumption) %in% "Country.Name")]
# Crear una lista con todos los valores representativos
tablas <- list(
#rep_agua_dulce,
#rep_areas_protegidas,
rep_energia_renovable,
rep_energia_fosil,
rep_emisiones_co2,
#rep_agriculture_land,
rep_electric_consumption
)
# Usar Reduce y merge para unir todas las tablas mediante las columnas Country.Code y Country.Name
tabla_unida <- Reduce(function(x, y) merge(x, y, by = c("Country.Code"), all = TRUE), tablas)
tabla_unida <- as.data.frame(tabla_unida)
# Ver los valores únicos y sus conteos
valores_conteo <- table(tabla_unida$Country.Code)
# Mostrar los valores que se repiten (es decir, aquellos con un conteo mayor a 1)
valores_repetidos <- valores_conteo[valores_conteo > 1]
# Imprimir los valores repetidos y sus conteos
print(valores_repetidos)
View(tabla_unida)
View(tabla_unida)
# Establecer Country.Code como nombres de fila
rownames(tabla_unida) <- tabla_unida$Country.Code
View(tabla_unida)
# Establecer Country.Code como nombres de fila
rownames(tabla_unida) <- tabla_unida$Country.Code
# Establecer Country.Code como nombres de fila
rownames(tabla_unida) <- tabla_unida$Country.Code
View(tabla_unida)
# Eliminar la columna Country.Name usando indexación básica de R
rep_energia_renovable <- rep_energia_renovable[, !(names(rep_energia_renovable) %in% "Country.Name")]
rep_energia_fosil <- rep_energia_fosil[, !(names(rep_energia_fosil) %in% "Country.Name")]
#rep_emisiones_co2 <- rep_emisiones_co2[, !(names(rep_emisiones_co2) %in% "Country.Name")]
rep_electric_consumption <- rep_electric_consumption[, !(names(rep_electric_consumption) %in% "Country.Name")]
# Crear una lista con todos los valores representativos
tablas <- list(
#rep_agua_dulce,
#rep_areas_protegidas,
rep_energia_renovable,
rep_energia_fosil,
rep_emisiones_co2,
#rep_agriculture_land,
rep_electric_consumption
)
# Usar Reduce y merge para unir todas las tablas mediante las columnas Country.Code y Country.Name
tabla_unida <- Reduce(function(x, y) merge(x, y, by = c("Country.Code"), all = TRUE), tablas)
tabla_unida <- as.data.frame(tabla_unida)
# Ver los valores únicos y sus conteos
valores_conteo <- table(tabla_unida$Country.Code)
# Mostrar los valores que se repiten (es decir, aquellos con un conteo mayor a 1)
valores_repetidos <- valores_conteo[valores_conteo > 1]
# Imprimir los valores repetidos y sus conteos
print(valores_repetidos)
# Establecer Country.Code como nombres de fila
rownames(tabla_unida) <- tabla_unida$Country.Code
# Eliminar la columna Country.Code si ya no la necesitas
tabla_unida <- tabla_unida[ , !names(tabla_unida) %in% "Country.Code"]
# Mostrar las primeras filas para verificar
head(tabla_unida)
View(tabla_unida)
View(tabla_unida)
# Seleccionar las columnas de la 2 a la 6
datos_seleccionados <- tabla_unida
# Calcular la matriz de correlaciones
matriz_correlaciones <- cor(datos_seleccionados, use = "complete.obs")
View(matriz_correlaciones)
# PCA ---------------------------------------------------------------------
# Eliminar filas con valores NA
datos_limpios <- na.omit(datos_seleccionados)
# Estandarizar los datos limpios
datos_estandarizados <- scale(datos_limpios)
# Realizar el PCA
pca_resultado <- prcomp(datos_estandarizados, center = TRUE, scale. = TRUE)
# Mostrar un resumen del resultado y su grafica
summary(pca_resultado)
plot(pca_resultado,type="l")
#Mostrar resumen y vectores
biplot(pca_resultado, scale=0)
# Calcular loadings de países en los componentes principales
loadings_paises <- pca_resultado$rotation[, 1:2]
# Crear un dataframe con los loadings de los países
data_paises <- as.data.frame(loadings_paises)
data_paises$Country <- rownames(data_paises)  # Agregar nombres de países como columna
# Graficar
ggplot(data_paises, aes(x = PC1, y = PC2, label = Country)) +
geom_point() +
geom_text(size = 3, vjust = 1.5) +  # Agregar etiquetas de países
labs(x = "Componente Principal 1", y = "Componente Principal 2", title = "Gráfico de Dispersión de Países en ACP")
pc1 <- apply(pca_resultado$rotation[,1]*datos_limpios,1,sum)
pc2 <- apply(pca_resultado$rotation[,2]*datos_limpios,1,sum)
datos_limpios$pc1 <- pc1
datos_limpios$pc2 <- pc2
plot(datos_limpios$pc1,datos_limpios$pc2)
# Calcular loadings de países en los componentes principales
loadings_paises <- pca_resultado$rotation[, 1:2]
loadings_paises
#Mostrar resumen y vectores
biplot(pca_resultado, scale=0)
# Calcular loadings de países en los componentes principales
loadings_paises <- pca_resultado$rotation[, 1:2]
# Crear un dataframe con los loadings de los países
data_paises <- as.data.frame(loadings_paises)
data_paises$Country <- rownames(data_paises)  # Agregar nombres de países como columna
# Graficar
ggplot(data_paises, aes(x = PC1, y = PC2, label = Country)) +
geom_point() +
geom_text(size = 3, vjust = 1.5) +  # Agregar etiquetas de países
labs(x = "Componente Principal 1", y = "Componente Principal 2", title = "Gráfico de Dispersión de Países en ACP")
getwd()
getwd()
setwd("C:/Users/sofia/Documents/GitHub/AEDenso/Indices/DesarrolloEconómico/src")
porcentaje_inflacion <- read.csv("../input/porcentaje_inflacion.csv")
porcentaje_PIB_Agricultura <- read.csv("../input/porcentaje_PIB_agricultura_pesca.csv")
PIB_per_capita <- read.csv("../input/PIB_per_capita.csv")
ahorro_bruto_PIB <- read.csv("../input/ahorro_bruto_PIB.csv")
exportacion_tecnologia <- read.csv("../input/exportacion_tecnologia_usd.csv")
porcentaje_inflacion <- read.csv("../input/porcentaje_inflacion.csv", skip=4)
porcentaje_PIB_Agricultura <- read.csv("../input/porcentaje_PIB_agricultura_pesca.csv", skip=4)
PIB_per_capita <- read.csv("../input/PIB_per_capita.csv", skip=4)
ahorro_bruto_PIB <- read.csv("../input/ahorro_bruto_PIB.csv", skip=4)
exportacion_tecnologia <- read.csv("../input/exportacion_tecnologia_usd.csv", skip=4)
View(ahorro_bruto_PIB)
tablas <- list(
rep_porcentaje_inflacion,
rep_porcentaje_PIB_Agricultura,
rep_PIB_per_capita,
rep_ahorro_bruto_PIB,
rep_exportacion_tecnologia
)
# Aplicar la función valores_representativos a cada una de las nuevas tablas
rep_porcentaje_inflacion <- valores_representativos(porcentaje_inflacion)
rep_porcentaje_PIB_Agricultura <- valores_representativos(porcentaje_PIB_Agricultura)
rep_PIB_per_capita <- valores_representativos(PIB_per_capita)
rep_ahorro_bruto_PIB <- valores_representativos(ahorro_bruto_PIB)
rep_exportacion_tecnologia <- valores_representativos(exportacion_tecnologia)
source("../src/funciones.R")
source("../src/reader.R")
# Aplicar la función valores_representativos a cada una de las nuevas tablas
rep_porcentaje_inflacion <- valores_representativos(porcentaje_inflacion)
rep_porcentaje_PIB_Agricultura <- valores_representativos(porcentaje_PIB_Agricultura)
rep_PIB_per_capita <- valores_representativos(PIB_per_capita)
rep_ahorro_bruto_PIB <- valores_representativos(ahorro_bruto_PIB)
rep_exportacion_tecnologia <- valores_representativos(exportacion_tecnologia)
tablas <- list(
rep_porcentaje_inflacion,
rep_porcentaje_PIB_Agricultura,
rep_PIB_per_capita,
rep_ahorro_bruto_PIB,
rep_exportacion_tecnologia
)
# Usar Reduce y merge para unir todas las tablas mediante las columnas Country.Code y Country.Name
tabla_unida <- Reduce(function(x, y) merge(x, y, by = c("Country.Code"), all = TRUE), tablas)
tabla_unida <- as.data.frame(tabla_unida)
View(tabla_unida)
# Usar Reduce y merge para unir todas las tablas mediante las columnas Country.Code y Country.Name
tabla_unida <- Reduce(function(x, y) merge(x, y, by = c("Country.Code","Country.Name"), all = TRUE), tablas)
tabla_unida <- as.data.frame(tabla_unida)
# Establecer Country.Code como nombres de fila
rownames(tabla_unida) <- tabla_unida$Country.Code
# Eliminar la columna Country.Code si ya no la necesitas
tabla_unida <- tabla_unida[ , !names(tabla_unida) %in% "Country.Code"]
View(porcentaje_inflacion)
View(tabla_unida)
# Seleccionar las columnas de la 2 a la 6
datos_seleccionados <- tabla_unida[2,6]
# Calcular la matriz de correlaciones
matriz_correlaciones <- cor(datos_seleccionados, use = "complete.obs")
# Seleccionar las columnas de la 2 a la 6
datos_seleccionados <- tabla_unida[2,6]
# Calcular la matriz de correlaciones
matriz_correlaciones <- cor(datos_seleccionados, use = "complete.obs")
datos_seleccionados
tabla_unida[2,6]
# Seleccionar las columnas de la 2 a la 6
datos_seleccionados <- tabla_unida[,2:6]
# Calcular la matriz de correlaciones
matriz_correlaciones <- cor(datos_seleccionados, use = "complete.obs")
View(matriz_correlaciones)
# PCA ---------------------------------------------------------------------
# Eliminar filas con valores NA
datos_limpios <- na.omit(datos_seleccionados)
# Estandarizar los datos limpios
datos_estandarizados <- scale(datos_limpios)
# Realizar el PCA
pca_resultado <- prcomp(datos_estandarizados, center = TRUE, scale. = TRUE)
# Mostrar un resumen del resultado y su grafica
summary(pca_resultado)
plot(pca_resultado,type="l")
#Mostrar resumen y vectores
biplot(pca_resultado, scale=0)
# Calcular loadings de países en los componentes principales
loadings_paises <- pca_resultado$rotation[, 1:2]
# Crear un dataframe con los loadings de los países
data_paises <- as.data.frame(loadings_paises)
data_paises$Country <- rownames(data_paises)  # Agregar nombres de países como columna
# Graficar
ggplot(data_paises, aes(x = PC1, y = PC2, label = Country)) +
geom_point() +
geom_text(size = 3, vjust = 1.5) +  # Agregar etiquetas de países
labs(x = "Componente Principal 1", y = "Componente Principal 2", title = "Gráfico de Dispersión de Países en ACP")
pc1 <- apply(pca_resultado$rotation[,1]*datos_limpios,1,sum)
pc2 <- apply(pca_resultado$rotation[,2]*datos_limpios,1,sum)
datos_limpios$pc1 <- pc1
datos_limpios$pc2 <- pc2
plot(datos_limpios$pc1,datos_limpios$pc2)
loadings_paises
tablas <- list(
#rep_porcentaje_inflacion,
rep_porcentaje_PIB_Agricultura,
rep_PIB_per_capita,
rep_ahorro_bruto_PIB,
#rep_exportacion_tecnologia
)
# Usar Reduce y merge para unir todas las tablas mediante las columnas Country.Code y Country.Name
tabla_unida <- Reduce(function(x, y) merge(x, y, by = c("Country.Code","Country.Name"), all = TRUE), tablas)
tabla_unida <- as.data.frame(tabla_unida)
# Establecer Country.Code como nombres de fila
rownames(tabla_unida) <- tabla_unida$Country.Code
# Eliminar la columna Country.Code si ya no la necesitas
tabla_unida <- tabla_unida[ , !names(tabla_unida) %in% "Country.Code"]
# Seleccionar las columnas de la 2 a la 6
datos_seleccionados <- tabla_unida[,2:4]
# Calcular la matriz de correlaciones
matriz_correlaciones <- cor(datos_seleccionados, use = "complete.obs")
# PCA ---------------------------------------------------------------------
# Eliminar filas con valores NA
datos_limpios <- na.omit(datos_seleccionados)
# Estandarizar los datos limpios
datos_estandarizados <- scale(datos_limpios)
# Realizar el PCA
pca_resultado <- prcomp(datos_estandarizados, center = TRUE, scale. = TRUE)
# Mostrar un resumen del resultado y su grafica
summary(pca_resultado)
plot(pca_resultado,type="l")
#Mostrar resumen y vectores
biplot(pca_resultado, scale=0)
# Calcular loadings de países en los componentes principales
loadings_paises <- pca_resultado$rotation[, 1:2]
# Crear un dataframe con los loadings de los países
data_paises <- as.data.frame(loadings_paises)
data_paises$Country <- rownames(data_paises)  # Agregar nombres de países como columna
# Graficar
ggplot(data_paises, aes(x = PC1, y = PC2, label = Country)) +
geom_point() +
geom_text(size = 3, vjust = 1.5) +  # Agregar etiquetas de países
labs(x = "Componente Principal 1", y = "Componente Principal 2", title = "Gráfico de Dispersión de Países en ACP")
pc1 <- apply(pca_resultado$rotation[,1]*datos_limpios,1,sum)
pc2 <- apply(pca_resultado$rotation[,2]*datos_limpios,1,sum)
datos_limpios$pc1 <- pc1
datos_limpios$pc2 <- pc2
plot(datos_limpios$pc1,datos_limpios$pc2)
loadings_paises
exportacion_tecnologia <- read.csv("../input/exportacion_tecnologia_usd.csv", skip=4)
porcentaje_desempleo <- read.csv("../input/porcentaje_desempleo.csv", skip=4)
rep_porcentaje_desempleo <- valores_representativos(porcentaje_desempleo)
tablas <- list(
#rep_porcentaje_inflacion,
rep_porcentaje_PIB_Agricultura,
rep_PIB_per_capita,
rep_ahorro_bruto_PIB,
#rep_exportacion_tecnologia
rep_porcentaje_desempleo
)
# Usar Reduce y merge para unir todas las tablas mediante las columnas Country.Code y Country.Name
tabla_unida <- Reduce(function(x, y) merge(x, y, by = c("Country.Code","Country.Name"), all = TRUE), tablas)
tabla_unida <- as.data.frame(tabla_unida)
# Establecer Country.Code como nombres de fila
rownames(tabla_unida) <- tabla_unida$Country.Code
# Eliminar la columna Country.Code si ya no la necesitas
tabla_unida <- tabla_unida[ , !names(tabla_unida) %in% "Country.Code"]
# Seleccionar las columnas de la 2 a la 6
datos_seleccionados <- tabla_unida[,2:5]
# Calcular la matriz de correlaciones
matriz_correlaciones <- cor(datos_seleccionados, use = "complete.obs")
View(matriz_correlaciones)
# PCA ---------------------------------------------------------------------
# Eliminar filas con valores NA
datos_limpios <- na.omit(datos_seleccionados)
# Estandarizar los datos limpios
datos_estandarizados <- scale(datos_limpios)
# Realizar el PCA
pca_resultado <- prcomp(datos_estandarizados, center = TRUE, scale. = TRUE)
# Mostrar un resumen del resultado y su grafica
summary(pca_resultado)
plot(pca_resultado,type="l")
loadings_paises
# Seleccionar las columnas de la 2 a la 6
datos_seleccionados <- tabla_unida[,2:5]
# Calcular la matriz de correlaciones
matriz_correlaciones <- cor(datos_seleccionados, use = "complete.obs")
# PCA ---------------------------------------------------------------------
# Eliminar filas con valores NA
datos_limpios <- na.omit(datos_seleccionados)
datos_limpios
# Estandarizar los datos limpios
datos_estandarizados <- scale(datos_limpios)
# Realizar el PCA
pca_resultado <- prcomp(datos_estandarizados, center = TRUE, scale. = TRUE)
# Mostrar un resumen del resultado y su grafica
summary(pca_resultado)
plot(pca_resultado,type="l")
#Mostrar resumen y vectores
biplot(pca_resultado, scale=0)
# Calcular loadings de países en los componentes principales
loadings_paises <- pca_resultado$rotation[, 1:2]
loadings_paises
# Crear un dataframe con los loadings de los países
data_paises <- as.data.frame(loadings_paises)
data_paises$Country <- rownames(data_paises)  # Agregar nombres de países como columna
# Graficar
ggplot(data_paises, aes(x = PC1, y = PC2, label = Country)) +
geom_point() +
geom_text(size = 3, vjust = 1.5) +  # Agregar etiquetas de países
labs(x = "Componente Principal 1", y = "Componente Principal 2", title = "Gráfico de Dispersión de Países en ACP")
plot(datos_limpios$pc1,datos_limpios$pc2)
plot(datos_limpios$pc1,datos_limpios$pc2)
pc1 <- apply(pca_resultado$rotation[,1]*datos_limpios,1,sum)
pc2 <- apply(pca_resultado$rotation[,2]*datos_limpios,1,sum)
datos_limpios$pc1 <- pc1
datos_limpios$pc2 <- pc2
plot(datos_limpios$pc1,datos_limpios$pc2)
getwd()
setwd("C:/Users/sofia/Documents/GitHub/AEDenso/animales/src/")
datos <- read.csv("../input/Listado_oficial_de_las_especies_silvestres_amenazadas_de_la_diversidad_biol_gica_colombiana_continental_y_marino_costera_-_Resoluci_n_0126_de_2024_20240526.csv")
header(datos)
head(datos)
View(datos)
# Instalar y cargar paquetes necesarios
install.packages("FactoMineR")
install.packages("factoextra")
install.packages("dplyr")
library(FactoMineR)
library(factoextra)
library(dplyr)
# Selección de columnas relevantes para el análisis
datos_reducidos <- datos %>%
select(FAMILIA, GENERO, EPITETO.ESPECIFICO, ESTADO.DE.AMENAZA)
# Convertir columnas categóricas a factores
datos_reducidos$FAMILIA <- as.factor(datos_reducidos$FAMILIA)
datos_reducidos$GENERO <- as.factor(datos_reducidos$GENERO)
datos_reducidos$EPITETO.ESPECIFICO <- as.factor(datos_reducidos$EPITETO.ESPECIFICO)
datos_reducidos$ESTADO.DE.AMENAZA <- as.factor(datos_reducidos$ESTADO.DE.AMENAZA)
# Selección de columnas relevantes para el análisis
datos_reducidos <- datos %>%
select(FAMILIA, GENERO, EPITETO.ESPECIFICO, ESTADO.DE.AMENAZA)
library(dplyr)
# Selección de columnas relevantes para el análisis
datos_reducidos <- datos %>%
select(FAMILIA, GENERO, EPITETO.ESPECIFICO, ESTADO.DE.AMENAZA)
# Convertir columnas categóricas a factores
datos_reducidos$FAMILIA <- as.factor(datos_reducidos$FAMILIA)
datos_reducidos$GENERO <- as.factor(datos_reducidos$GENERO)
datos_reducidos$EPITETO.ESPECIFICO <- as.factor(datos_reducidos$EPITETO.ESPECIFICO)
datos_reducidos$ESTADO.DE.AMENAZA <- as.factor(datos_reducidos$ESTADO.DE.AMENAZA)
# Ver la estructura de los datos preparados
str(datos_reducidos)
View(datos_reducidos)
View(datos)
# Selección de columnas relevantes para el análisis
datos_reducidos <- datos %>%
select(FAMILIA, GENERO, EPITETO.ESPECIFICO, ESTADO.DE.AMENAZA,IDENTIFICACION,NOMBRE.CIENTIFICO)
# Convertir columnas categóricas a factores
datos_reducidos$FAMILIA <- as.factor(datos_reducidos$FAMILIA)
datos_reducidos$GENERO <- as.factor(datos_reducidos$GENERO)
datos_reducidos$EPITETO.ESPECIFICO <- as.factor(datos_reducidos$EPITETO.ESPECIFICO)
datos_reducidos$ESTADO.DE.AMENAZA <- as.factor(datos_reducidos$ESTADO.DE.AMENAZA)
# Ver la estructura de los datos preparados
str(datos_reducidos)
View(datos_reducidos)
# Selección de columnas relevantes para el análisis
datos_reducidos <- datos %>%
select(IDENTIFICACION,NOMBRE.CIENTIFICO,FAMILIA, GENERO, EPITETO.ESPECIFICO, ESTADO.DE.AMENAZA)
# Convertir columnas categóricas a factores
datos_reducidos$FAMILIA <- as.factor(datos_reducidos$FAMILIA)
datos_reducidos$GENERO <- as.factor(datos_reducidos$GENERO)
datos_reducidos$EPITETO.ESPECIFICO <- as.factor(datos_reducidos$EPITETO.ESPECIFICO)
datos_reducidos$ESTADO.DE.AMENAZA <- as.factor(datos_reducidos$ESTADO.DE.AMENAZA)
# Ver la estructura de los datos preparados
str(datos_reducidos)
View(datos_reducidos)
# Realizar el ACM
acm <- MCA(datos_reducidos, quali.sup = 6)  # "quali.sup" indica la variable suplementaria (ESTADO.DE.AMENAZA)
# Resumen del ACM
summary(acm)
# Realizar el ACM
acm <- MCA(datos_reducidos, quali.sup = 6)  # "quali.sup" indica la variable suplementaria (ESTADO.DE.AMENAZA)
library(FactoMineR)
library(factoextra)
# Realizar el ACM
acm <- MCA(datos_reducidos, quali.sup = 6)  # "quali.sup" indica la variable suplementaria (ESTADO.DE.AMENAZA)
# Resumen del ACM
summary(acm)
# Resumen del ACM
summary(acm)
# Visualizar las contribuciones de las variables
fviz_contrib(acm, choice = "var", axes = 1:2)
View(acm)
View(acm)
# Selección de columnas relevantes para el análisis
datos_reducidos <- datos %>%
select(FAMILIA, GENERO, EPITETO.ESPECIFICO, ESTADO.DE.AMENAZA)
# Convertir columnas categóricas a factores
datos_reducidos$FAMILIA <- as.factor(datos_reducidos$FAMILIA)
datos_reducidos$GENERO <- as.factor(datos_reducidos$GENERO)
datos_reducidos$EPITETO.ESPECIFICO <- as.factor(datos_reducidos$EPITETO.ESPECIFICO)
datos_reducidos$ESTADO.DE.AMENAZA <- as.factor(datos_reducidos$ESTADO.DE.AMENAZA)
# Ver la estructura de los datos preparados
str(datos_reducidos)
# Realizar el ACM
acm <- MCA(datos_reducidos, quali.sup = 4)  # "quali.sup" indica la variable suplementaria (ESTADO.DE.AMENAZA)
# Resumen del ACM
summary(acm)
View(acm)
# Selección de columnas relevantes para el análisis
datos_reducidos <- datos %>%
select(CLASE, ORDEN, FAMILIA, GENERO, EPITETO.ESPECIFICO, ESTADO.DE.AMENAZA, ESTADO.TAXONOMICO)
# Convertir columnas categóricas a factores
datos_reducidos <- datos_reducidos %>%
mutate(across(everything(), as.factor))
# Realizar el ACM
acm <- MCA(datos_reducidos, quali.sup = 5:7)  # "quali.sup" indica las variables suplementarias
# Resumen del ACM
summary(acm)
# Visualizar las contribuciones de las variables
fviz_contrib(acm, choice = "var", axes = 1:2)
# Visualizar el mapa de individuos con nombres de especies
fviz_mca_ind(acm, label = "all", habillage = "ESTADO.DE.AMENAZA", palette = "jco", addEllipses = TRUE) +
labs(title = "Mapa de Individuos (Especies) en el ACM",
x = "Dim 1",
y = "Dim 2")
# Visualizar el mapa de variables
fviz_mca_var(acm, repel = TRUE)
View(datos)
table(datos$FAMILIA,datos$ESTADO.DE.AMENAZA)
table(datos$GENERO,datos$ESTADO.DE.AMENAZA)
table(datos$ORDEN,datos$ESTADO.DE.AMENAZA)
library(ggplot2)
tabla_familia <- table(datos$FAMILIA,datos$ESTADO.DE.AMENAZA)
tabla_orden <- table(datos$ORDEN,datos$ESTADO.DE.AMENAZA)
baloonplot(t(tabla_familia))
balloonplot(t(tabla_familia))
library(ggplot2)
balloonplot(t(tabla_familia))
install.packages("gplots")
library(gplots)
balloonplot(t(tabla_familia))
balloonplot(t(tabla_orden))
chisq.test(tabla_orden)
chisq.test(tabla_familia)
uni.mca <- CA(tabla_orden, graph= TRUE)
print(uni.mca)
summary(uni.mca)
table(datos$CLASE,datos$ESTADO.DE.AMENAZA)
tabla_clase <- table(datos$CLASE,datos$ESTADO.DE.AMENAZA)
balloonplot(t(tabla_clase))
table(datos$TAXON.OBSERVACIONES,datos$ESTADO.DE.AMENAZA)
table(datos$RANGO.DE.TAXON,datos$ESTADO.DE.AMENAZA)
balloonplot(t(tabla_clase))
uni.mca <- CA(tabla_clase, graph= TRUE)
View(datos)
#Analisis de correspondencias multiples
fit2 <- MCA(datos[c(7,8,20)], graph = TRUE)
View(datos)
#Analisis de correspondencias multiples
fit2 <- MCA(datos[c(5:10,20)], graph = TRUE)
#Analisis de correspondencias multiples
fit2 <- MCA(datos[c(5:7,20)], graph = TRUE)
summary(fit2)
#Analisis de correspondencias multiples
fit2 <- MCA(datos[c(7,8,20)], graph = TRUE)
summary(fit2)
#Analisis de correspondencias multiples
fit2 <- MCA(datos[c(5:9,20)], graph = TRUE)
summary(fit2)
#Analisis de correspondencias multiples
fit2 <- MCA(datos[c(5:8,20)], graph = TRUE)
summary(fit2)
#Analisis de correspondencias multiples
fit2 <- MCA(datos[c(5:7,20)], graph = TRUE)
summary(fit2)
#Analisis de correspondencias multiples
fit2 <- MCA(datos[c(7,8,20)], graph = TRUE)
summary(fit2)
fviz_screeplot(fit2,addlabels = TRUE, ylim = c(0,30))
fviz_screeplot(fit2,addlabels = TRUE)
fviz_mca(axes=c(1,2))
fviz_mca(fit2,axes=c(1,2))
