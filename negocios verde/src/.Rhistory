library(MAAS)
library(MAAS)
library(MASS)
library(dplyr)
medias <- c(10,15,12)
varianzas_covarianzas <- matrix(c(10,8,7,
8,11,9,
7,9,15), byrow = TRUE, ncol = 3)
n <- 10
datos_simulados <- mvrnorm(n, medias, varianzas_covarianzas)
apply(datos_simulados,2, mean)
cor(datos_simulados)
library(MASS)
library(dplyr)
medias <- c(10,15,12)
varianzas_covarianzas <- matrix(c(10,8,7,
8,11,9,
7,9,15), byrow = TRUE, ncol = 3)
n <- 10
datos_simulados <- mvrnorm(n, medias, varianzas_covarianzas) %>%  data.frame()
apply(datos_simulados,2, mean)
cor(datos_simulados)
datos_simulado
datos_simulados <- mvrnorm(n, medias, varianzas_covarianzas) %>%  data.frame()
library(MASS)
library(dplyr)
medias <- c(10,15,12)
varianzas_covarianzas <- matrix(c(10,8,7,
8,11,9,
7,9,15), byrow = TRUE, ncol = 3)
n <- 10
datos_simulados <- mvrnorm(n, medias, varianzas_covarianzas) %>%  data.frame()
apply(datos_simulados,2, mean)
cor(datos_simulados)
library(MASS)
library(dplyr)
medias <- c(10,15,12)
varianzas_covarianzas <- matrix(c(10,8,7,
8,11,9,
7,9,15), byrow = TRUE, ncol = 3)
n <- 10
datos_simulados <- mvrnorm(n, medias, varianzas_covarianzas) %>%  data.frame()
apply(datos_simulados,2, mean)
cor(datos_simulados)
library(MASS)
library(dplyr)
medias <- c(10,15,12)
varianzas_covarianzas <- matrix(c(10,8,7,
8,11,9,
7,9,15), byrow = TRUE, ncol = 3)
n <- 10
datos_simulados <- mvrnorm(n, medias, varianzas_covarianzas) %>%  data.frame()
apply(datos_simulados,2, mean)
cor(datos_simulados)
datos_simulados
datos_simulados
# Gráfico 1
ggplot(datos_simulados, aes(x = X1, y = X2)) +
geom_point(color = "blue", size = 3) +
labs(title = "Gráfico X1 vs X2",
x = "X1", y = "X2") +
theme_minimal()
library(ggplot2)
# Gráfico 1
ggplot(datos_simulados, aes(x = X1, y = X2)) +
geom_point(color = "blue", size = 3) +
labs(title = "Gráfico X1 vs X2",
x = "X1", y = "X2") +
theme_minimal()
library(ggplot2)
library(ggplot2)
# Gráfico 1
ggplot(datos_simulados, aes(x = X1, y = X2)) +
geom_point(color = "blue", size = 3) +
labs(title = "Gráfico X1 vs X2",
x = "X1", y = "X2") +
theme_minimal()
datos_simulados <- mvrnorm(n, medias, varianzas_covarianzas) %>%  data.frame()
apply(datos_simulados,2, mean)
cor(datos_simulados)
# Gráfico 1
ggplot(datos_simulados, aes(x = X1, y = X2)) +
geom_point(color = "blue", size = 3) +
labs(title = "Gráfico X1 vs X2",
x = "X1", y = "X2") +
theme_minimal()
n <- 100
datos_simulados <- mvrnorm(n, medias, varianzas_covarianzas) %>%  data.frame()
apply(datos_simulados,2, mean)
cor(datos_simulados)
# Gráfico 1
ggplot(datos_simulados, aes(x = X1, y = X2)) +
geom_point(color = "blue", size = 3) +
labs(title = "Gráfico X1 vs X2",
x = "X1", y = "X2") +
theme_minimal()
# Gráfico 2
ggplot(datos_simulados, aes(x = X2, y = X3)) +
geom_point(color = "green", size = 3) +
labs(title = "Gráfico X2 vs X3",
x = "X2", y = "X3") +
theme_minimal()
# Gráfico 3
ggplot(datos_simulados, aes(x = X3, y = X1)) +
geom_point(color = "red", size = 3) +
labs(title = "Gráfico X3 vs X1",
x = "X3", y = "X1") +
theme_minimal()
medias <- c(2, 5, 1.2)
varianzas_covarianzas <- matrix(c(1, 0.8, 0.7,
0.8, 1.1, 0.9,
0.7, 0.9, 1.3), byrow = TRUE, ncol = 3)
n <- 100
datos_simulados_2 <- mvrnorm(n, medias_2, varianzas_covarianzas_2) %>% data.frame()
n <- 100
datos_simulados_2 <- mvrnorm(n, medias_2, varianzas_covarianzas_2) %>% data.frame()
n <- 100
datos_simulados_2 <- mvrnorm(n, medias_2, varianzas_covarianzas_2) %>% data.frame()
medias2 <- c(2, 5, 1.2)
varianzas_covarianzas <- matrix(c(1, 0.8, 0.7,
0.8, 1.1, 0.9,
0.7, 0.9, 1.3), byrow = TRUE, ncol = 3)
n <- 100
datos_simulados_2 <- mvrnorm(n, medias_2, varianzas_covarianzas_2) %>% data.frame()
medias2 <- c(2, 5, 1.2)
varianzas_covarianzas_2 <- matrix(c(1, 0.8, 0.7,
0.8, 1.1, 0.9,
0.7, 0.9, 1.3), byrow = TRUE, ncol = 3)
n <- 100
datos_simulados_2 <- mvrnorm(n, medias_2, varianzas_covarianzas_2) %>% data.frame()
medias_2 <- c(2, 5, 1.2)
varianzas_covarianzas_2 <- matrix(c(1, 0.8, 0.7,
0.8, 1.1, 0.9,
0.7, 0.9, 1.3), byrow = TRUE, ncol = 3)
n <- 100
datos_simulados_2 <- mvrnorm(n, medias_2, varianzas_covarianzas_2) %>% data.frame()
apply(datos_simulados_2, 2, mean)
cor(datos_simulados)
datos_simulados1[, 'grupo'] <- 'G1'
n <- 100
datos_simulados1 <- mvrnorm(n, medias, varianzas_covarianzas) %>%  data.frame()
datos_kmeans
#Simular otro conjunto de datos pero ahora con medias
medias_2 <- c(2, 5, 1.2)
varianzas_covarianzas_2 <- matrix(c(1, 0.8, 0.7,
0.8, 1.1, 0.9,
0.7, 0.9, 1.3), byrow = TRUE, ncol = 3)
n <- 100
datos_simulados_2 <- mvrnorm(n, medias_2, varianzas_covarianzas_2) %>% data.frame()
apply(datos_simulados_2, 2, mean)
cor(datos_simulados)
datos_simulados1[, 'grupo'] <- 'G1'
datos_simulados_2[, 'grupo'] <- 'G2'
datos_kmeans <- bind_rows(datos_simulados1, datos_simulados_2)
datos_kmeans
getwd()
read.csv("Hackaton Datos/negocios verde/input/Listado_de_Negocios_Verdes.csv")
dataset <- read.csv("../input/Listado_de_Negocios_Verdes.csv")
dataset <- read.csv("../input/Listado_de_Negocios_Verdes.csv")
dataset <- read.csv("Hackaton Datos/negocios verde/input/Listado_de_Negocios_Verdes.csv")
View(dataset)
install.packages("xml2")
ruta_xml <- "ruta/del/archivo.xml"
# Leer el archivo XML
doc <- read_xml(ruta_xml)
ruta_xml <- "../Documents/Hackaton Datos/negocios verde/input/DANE-DCD-CNPV-2018.xml"
library(XML)
install.packages("XML")
library(XML)
# Ruta del archivo XML
ruta_xml <- "../Documents/Hackaton Datos/negocios verde/input/DANE-DCD-CNPV-2018.xml"
# Leer el archivo XML y convertirlo en un data frame
datos_df <- xmlToDataFrame(ruta_xml)
# Imprimir el data frame
print(datos_df)
install.packages("readxl")
library(readxl)
library(readxl)
# Ruta del archivo Excel
ruta_xlsx <- "Hackaton Datos/negocios verde/input/poblacion por departamento.xlsx"
# Leer el archivo Excel y cargar una hoja específica en un data frame
datos_df <- read_excel(ruta_xlsx, sheet = 1)  # Cambia el número de hoja según sea necesario
# Imprimir el data frame
print(datos_df)
View(datos_df)
# Leer el archivo Excel y cargar una hoja específica en un data frame
datos_df <- read_excel(ruta_xlsx, sheet = 1, skip=6)  # Cambia el número de hoja según sea necesario
View(datos_df)
# Leer el archivo Excel y cargar una hoja específica en un data frame
datos_df <- read_excel(ruta_xlsx, sheet = 1, skip=9)  # Cambia el número de hoja según sea necesario
# Imprimir el data frame
print(datos_df)
View(datos_df)
# Leer el archivo Excel y cargar una hoja específica en un data frame
datos_df <- read_excel(ruta_xlsx, sheet = 1, skip=8)  # Cambia el número de hoja según sea necesario
View(datos_df)
# Leer el archivo Excel y cargar una hoja específica en un data frame
datos_df <- read_excel(ruta_xlsx, sheet = 1, skip=7)  # Cambia el número de hoja según sea necesario
View(datos_df)
# Leer el archivo Excel y cargar una hoja específica en un data frame
datos_df <- read_excel(ruta_xlsx, sheet = 1, skip=8)  # Cambia el número de hoja según sea necesario
View(datos_df)
datos_negocios <- read.csv("Hackaton Datos/negocios verde/input/Listado_de_Negocios_Verdes.csv")
# Ruta del archivo Excel
ruta_xlsx <- "Hackaton Datos/negocios verde/input/poblacion por departamento.xlsx"
# Leer el archivo Excel y cargar una hoja específica en un data frame
datos_departamento <- read_excel(ruta_xlsx, sheet = 1, skip=8)  # Cambia el número de hoja según sea necesario
library(readxl)
getwd()
setwd("C:/Users/sofia/Documents/Hackaton Datos/negocios verde/src/")
datos_negocios <- read.csv("Hackaton Datos/negocios verde/input/Listado_de_Negocios_Verdes.csv")
# Ruta del archivo Excel
ruta_xlsx <- "Hackaton Datos/negocios verde/input/poblacion por departamento.xlsx"
# Leer el archivo Excel y cargar una hoja específica en un data frame
datos_departamento <- read_excel(ruta_xlsx, sheet = 1, skip=8)  # Cambia el número de hoja según sea necesario
# Imprimir el data frame
print(datos_df)
# Leer el archivo Excel y cargar una hoja específica en un data frame
datos_departamento <- read_excel(ruta_xlsx, sheet = 1, skip=8)  # Cambia el número de hoja según sea necesario
setwd("C:/Users/sofia/Documents/Hackaton Datos/negocios verde/src/")
getwd()
datos_negocios <- read.csv("Hackaton Datos/negocios verde/input/Listado_de_Negocios_Verdes.csv")
datos_negocios <- read.csv("../input/Listado_de_Negocios_Verdes.csv")
# Ruta del archivo Excel
ruta_xlsx <- "../input/poblacion por departamento.xlsx"
# Leer el archivo Excel y cargar una hoja específica en un data frame
datos_departamento <- read_excel(ruta_xlsx, sheet = 1, skip=8)  # Cambia el número de hoja según sea necesario
# Imprimir el data frame
print(datos_df)
View(datos_negocios)
View(datos_departamento)
datos_filtrados_departamento <- datos_df[datos_df$AÑO == 2024 & datos_df$`ÁREA GEOGRÁFICA` == "Total", ]
datos_filtrados_departamento <- datos_departamento[datos_df$AÑO == 2024 & datos_df$`ÁREA GEOGRÁFICA` == "Total", ]
datos_filtrados_departamento <- datos_departamento[datos_departamento$AÑO == 2024 & datos_df$`ÁREA GEOGRÁFICA` == "Total", ]
datos_filtrados_departamento <- datos_departamento[datos_departamento$AÑO == 2024 & datos_departamento$`ÁREA GEOGRÁFICA` == "Total", ]
View(datos_filtrados_departamento)
datos_filtrados_negocio
colnames()
colnames(datos_negocios)
View(datos_negocios)
unique(datos_negocios$Producto.Principal..Que.promueve.el.Negocio.Verde.)
productos <- unique(datos_negocios$Producto.Principal..Que.promueve.el.Negocio.Verde.)
colnames(datos_negocios)
]
datos_filtrados_negocios <- datos_negocios[, -c("Descripción..Del.Negocio.Verde", "RAZÓN.SOCIAL..Del.Negocio.Verde.","NOMBRE.REPRESENTANTE..Del.Negocio.Verde.","Producto.Principal..Que.promueve.el.Negocio.Verde.")]
datos_filtrados_negocios <- datos_negocios[, -c("Descripción..Del.Negocio.Verde",
"RAZÓN.SOCIAL..Del.Negocio.Verde.",
"NOMBRE.REPRESENTANTE..Del.Negocio.Verde.",
"Producto.Principal..Que.promueve.el.Negocio.Verde.")]
columnas_a_eliminar <- c("Descripción..Del.Negocio.Verde",
"RAZÓN.SOCIAL..Del.Negocio.Verde.",
"NOMBRE.REPRESENTANTE..Del.Negocio.Verde.",
"Producto.Principal..Que.promueve.el.Negocio.Verde.")
datos_filtrados <- datos_df[, !(names(datos_df) %in% columnas_a_eliminar)]
datos_filtrados <- datos_negocios[, !(names(datos_df) %in% columnas_a_eliminar)]
datos_filtrados <- datos_negocios[, !(names(datos_negocios) %in% columnas_a_eliminar)]
View(datos_filtrados)
colnames(datos_negocios)
columnas_a_eliminar <- c("Descripción..Del.Negocio.Verde.",
"RAZÓN.SOCIAL..Del.Negocio.Verde.",
"NOMBRE.REPRESENTANTE..Del.Negocio.Verde.",
"Producto.Principal..Que.promueve.el.Negocio.Verde.")
datos_filtrados <- datos_negocios[, !(names(datos_negocios) %in% columnas_a_eliminar)]
# Seleccionar las columnas que no están en la lista de columnas a eliminar
datos_filtrados_negocios <- datos_negocios[, !(names(datos_negocios) %in% columnas_a_eliminar)]
View(datos_filtrados)
unique(datos_filtrados_negocios$MUNICIPIO..Donde.se.encuentra.el.Negocio.Verde.)
municipio <- unique(datos_filtrados_negocios$MUNICIPIO..Donde.se.encuentra.el.Negocio.Verde.)
setwd("C:/Users/sofia/Documents/Hackaton Datos/negocios verde/src/")
datos_negocios <- read.csv("../input/Listado_de_Negocios_Verdes.csv")
ruta_xlsx <- "../input/poblacion por departamento.xlsx"
# Leer el archivo Excel y cargar una hoja específica en un data frame
datos_departamento <- read_excel(ruta_xlsx, sheet = 1, skip=8)  # Cambia el número de hoja según sea necesario
datos_filtrados_departamento <- datos_departamento[datos_departamento$AÑO == 2024 & datos_departamento$`ÁREA GEOGRÁFICA` == "Total", ]
columnas_a_eliminar <- c("Descripción..Del.Negocio.Verde.",
"RAZÓN.SOCIAL..Del.Negocio.Verde.",
"NOMBRE.REPRESENTANTE..Del.Negocio.Verde.",
"Producto.Principal..Que.promueve.el.Negocio.Verde.",
"MUNICIPIO..Donde.se.encuentra.el.Negocio.Verde.")
# Seleccionar las columnas que no están en la lista de columnas a eliminar
datos_filtrados_negocios <- datos_negocios[, !(names(datos_negocios) %in% columnas_a_eliminar)]
View(datos_filtrados_negocios)
View(datos_filtrados_departamento)
datos_filtrados_departamento <- datos_departamento[datos_departamento$AÑO == 2022 & datos_departamento$`ÁREA GEOGRÁFICA` == "Total", ]
unique(datos_filtrados_negocios$CATEGORÍA..Del.Negocio.Verde.)
unique((datos_filtrados_negocios$AUTORIDAD.AMBIENTAL..Donde.se.encuentra.el.Negocio.Verde.))
columnas_a_eliminar <- c("Descripción..Del.Negocio.Verde.",
"RAZÓN.SOCIAL..Del.Negocio.Verde.",
"NOMBRE.REPRESENTANTE..Del.Negocio.Verde.",
"Producto.Principal..Que.promueve.el.Negocio.Verde.",
"MUNICIPIO..Donde.se.encuentra.el.Negocio.Verde.",
"AUTORIDAD.AMBIENTAL..Donde.se.encuentra.el.Negocio.Verde.")
# Seleccionar las columnas que no están en la lista de columnas a eliminar
datos_filtrados_negocios <- datos_negocios[, !(names(datos_negocios) %in% columnas_a_eliminar)]
unique(datos_filtrados_negocios$CATEGORÍA..Del.Negocio.Verde.)
unique((datos_filtrados_negocios$AUTORIDAD.AMBIENTAL..Donde.se.encuentra.el.Negocio.Verde.))
unique((datos_filtrados_negocios$SECTOR..Al.cual.pertenece.el.Negocio.Verde.))
unique(datos_filtrados_negocios$REGIÓN..Donde.se.encuentra.el.Negocio.Verde.)
unique(datos_filtrados_negocios$CATEGORÍA.COMERCIAL..Al.cual.pertenece.el.Negocio.Verde.)
unique(datos_filtrados_negocios$SUBSECTOR..Al.cual.pertenece.el.Negocio.Verde.)
unique(datos_filtrados_negocios$CATEGORÍA..Del.Negocio.Verde.)
unique((datos_filtrados_negocios$SECTOR..Al.cual.pertenece.el.Negocio.Verde.))
unique(datos_filtrados_negocios$REGIÓN..Donde.se.encuentra.el.Negocio.Verde.)
unique(datos_filtrados_negocios$CATEGORÍA.COMERCIAL..Al.cual.pertenece.el.Negocio.Verde.) #
unique(datos_filtrados_negocios$SUBSECTOR..Al.cual.pertenece.el.Negocio.Verde.)
colnames(datos_filtrados_negocios)
# Estadística descriptiva -------------------------------------------------
ggplot(datos_df, aes(x = `AÑO...Año.de.registro.`)) +
geom_bar(fill = "blue") +
labs(title = "Número de Negocios Verdes Registrados por Año",
x = "Año",
y = "Número de Negocios") +
theme_minimal()
library(ggplot2)
# Crear el gráfico de barras
ggplot(datos_df, aes(x = `AÑO...Año.de.registro.`)) +
geom_bar(fill = "blue") +
labs(title = "Número de Negocios Verdes Registrados por Año",
x = "Año",
y = "Número de Negocios") +
theme_minimal()
# Crear el gráfico de barras
ggplot(datos_filtrados_negocios, aes(x = `AÑO...Año.de.registro.`)) +
geom_bar(fill = "blue") +
labs(title = "Número de Negocios Verdes Registrados por Año",
x = "Año",
y = "Número de Negocios") +
theme_minimal()
# Crear el gráfico de barras
ggplot(datos_filtrados_negocios, aes(x = `AÑO...Año.de.registro.`)) +
geom_bar(fill = "lightblue") +
labs(title = "Número de Negocios Verdes Registrados por Año",
x = "Año",
y = "Número de Negocios") +
theme_minimal()
ggplot(datos_filtrados_negocios, aes(x = `AÑO...Año.de.registro.`)) +
geom_bar(stat = "identity", fill = "lightblue") +
labs(title = "Número de Negocios Verdes Registrados por Año",
x = "Año",
y = "Número de Negocios") +
theme_minimal()
ggplot(datos_filtrados_negocios, aes(x = `AÑO...Año.de.registro.`)) +
geom_bar(stat = "identity", fill = "lightblue") +
labs(title = "Número de Negocios Verdes Registrados por Año",
x = "Año",
y = "Número de Negocios") +
theme_minimal()
ggplot(datos_filtrados_negocios, aes(x = `AÑO...Año.de.registro.`)) +
geom_bar(stat = "count", fill = "lightblue") +
labs(title = "Número de Negocios Verdes Registrados por Año",
x = "Año",
y = "Número de Negocios") +
theme_minimal()
ggplot(datos_filtrados_negocios, aes(x = string(`AÑO...Año.de.registro.`)) +
geom_bar(stat = "count", fill = "lightblue") +
labs(title = "Número de Negocios Verdes Registrados por Año",
x = "Año",
y = "Número de Negocios") +
theme_minimal()
# Crear el gráfico de barras
ggplot(datos_filtrados_negocios, aes(x = as.character(`AÑO...Año.de.registro.`))) +
ggplot(datos_filtrados_negocios, aes(x = as.character(`AÑO...Año.de.registro.`))) +
geom_bar(fill = "lightblue") +
labs(title = "Número de Negocios Verdes Registrados por Año",
x = "Año",
y = "Número de Negocios") +
theme_minimal()
# Grafico de barras
ggplot(datos_filtrados_negocios, aes(x = `REGIÓN..Donde.se.encuentra.el.Negocio.Verde.`)) +
geom_bar(fill = "lightblue") +
labs(title = "Número de Negocios Verdes por Región",
x = "Región",
y = "Número de Negocios") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotar etiquetas del eje x para mejor legibilidad
ggplot(datos_filtrados_negocios, aes(x = `DEPARTAMENTO..Donde.se.encuentra.el.Negocio.Verde.`)) +
geom_bar(fill = "lightblue") +
labs(title = "Número de Negocios Verdes por Departamento",
x = "Departamento",
y = "Número de Negocios") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotar etiquetas del eje x para mejor legibilidad
ggplot(datos_filtrados_negocios, aes(x = `CATEGORÍA..Del.Negocio.Verde.`)) +
geom_bar(fill = "beige") +
labs(title = "Número de Negocios Verdes por Categoría",
x = "Categoría",
y = "Número de Negocios") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotar etiquetas del eje x para mejor legibilidad
#Grafico de varras por sector
ggplot(datos_filtrados_negocios, aes(x = `SECTOR..Al.cual.pertenece.el.Negocio.Verde.`)) +
geom_bar(fill = "green") +
labs(title = "Número de Negocios Verdes por Sector",
x = "Sector",
y = "Número de Negocios") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotar etiquetas del eje x para mejor legibilidad
ggplot(datos_filtrados_negocios, aes(x = `CATEGORÍA.COMERCIAL..Al.cual.pertenece.el.Negocio.Verde.`)) +
geom_bar(fill = "lightblue") +
labs(title = "Número de Negocios Verdes por Categoría Comercial",
x = "Categoría Comercial",
y = "Número de Negocios") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotar etiquetas del eje x para mejor legibilidad
ggplot(datos_filtrados_negocios, aes(x = `CATEGORÍA.COMERCIAL..Al.cual.pertenece.el.Negocio.Verde.`)) +
geom_bar(fill = "lightblue") +
labs(title = "Número de Negocios Verdes por Categoría Comercial",
x = "Categoría Comercial",
y = "Número de Negocios") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))  # Rotar etiquetas del eje x para mejor legibilidad
ggplot(datos_filtrados_negocios, aes(x = `CATEGORÍA.COMERCIAL..Al.cual.pertenece.el.Negocio.Verde.`)) +
geom_bar(fill = "lightblue") +
labs(title = "Número de Negocios Verdes por Categoría Comercial",
x = "Categoría Comercial",
y = "Número de Negocios") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 60, hjust = 1))  # Rotar etiquetas del eje x para mejor legibilidad
