library(MAAS)
library(MAAS)
library(MASS)
library(dplyr)
medias <- c(10,15,12)
varianzas_covarianzas <- matrix(c(10,8,7,
8,11,9,
7,9,15), byrow = TRUE, ncol = 3)
n <- 10
datos_simulados <- mvrnorm(n, medias, varianzas_covarianzas)
apply(datos_simulados,2, mean)
cor(datos_simulados)
library(MASS)
library(dplyr)
medias <- c(10,15,12)
varianzas_covarianzas <- matrix(c(10,8,7,
8,11,9,
7,9,15), byrow = TRUE, ncol = 3)
n <- 10
datos_simulados <- mvrnorm(n, medias, varianzas_covarianzas) %>%  data.frame()
apply(datos_simulados,2, mean)
cor(datos_simulados)
datos_simulado
datos_simulados <- mvrnorm(n, medias, varianzas_covarianzas) %>%  data.frame()
library(MASS)
library(dplyr)
medias <- c(10,15,12)
varianzas_covarianzas <- matrix(c(10,8,7,
8,11,9,
7,9,15), byrow = TRUE, ncol = 3)
n <- 10
datos_simulados <- mvrnorm(n, medias, varianzas_covarianzas) %>%  data.frame()
apply(datos_simulados,2, mean)
cor(datos_simulados)
library(MASS)
library(dplyr)
medias <- c(10,15,12)
varianzas_covarianzas <- matrix(c(10,8,7,
8,11,9,
7,9,15), byrow = TRUE, ncol = 3)
n <- 10
datos_simulados <- mvrnorm(n, medias, varianzas_covarianzas) %>%  data.frame()
apply(datos_simulados,2, mean)
cor(datos_simulados)
library(MASS)
library(dplyr)
medias <- c(10,15,12)
varianzas_covarianzas <- matrix(c(10,8,7,
8,11,9,
7,9,15), byrow = TRUE, ncol = 3)
n <- 10
datos_simulados <- mvrnorm(n, medias, varianzas_covarianzas) %>%  data.frame()
apply(datos_simulados,2, mean)
cor(datos_simulados)
datos_simulados
datos_simulados
# Gráfico 1
ggplot(datos_simulados, aes(x = X1, y = X2)) +
geom_point(color = "blue", size = 3) +
labs(title = "Gráfico X1 vs X2",
x = "X1", y = "X2") +
theme_minimal()
library(ggplot2)
# Gráfico 1
ggplot(datos_simulados, aes(x = X1, y = X2)) +
geom_point(color = "blue", size = 3) +
labs(title = "Gráfico X1 vs X2",
x = "X1", y = "X2") +
theme_minimal()
library(ggplot2)
library(ggplot2)
# Gráfico 1
ggplot(datos_simulados, aes(x = X1, y = X2)) +
geom_point(color = "blue", size = 3) +
labs(title = "Gráfico X1 vs X2",
x = "X1", y = "X2") +
theme_minimal()
datos_simulados <- mvrnorm(n, medias, varianzas_covarianzas) %>%  data.frame()
apply(datos_simulados,2, mean)
cor(datos_simulados)
# Gráfico 1
ggplot(datos_simulados, aes(x = X1, y = X2)) +
geom_point(color = "blue", size = 3) +
labs(title = "Gráfico X1 vs X2",
x = "X1", y = "X2") +
theme_minimal()
n <- 100
datos_simulados <- mvrnorm(n, medias, varianzas_covarianzas) %>%  data.frame()
apply(datos_simulados,2, mean)
cor(datos_simulados)
# Gráfico 1
ggplot(datos_simulados, aes(x = X1, y = X2)) +
geom_point(color = "blue", size = 3) +
labs(title = "Gráfico X1 vs X2",
x = "X1", y = "X2") +
theme_minimal()
# Gráfico 2
ggplot(datos_simulados, aes(x = X2, y = X3)) +
geom_point(color = "green", size = 3) +
labs(title = "Gráfico X2 vs X3",
x = "X2", y = "X3") +
theme_minimal()
# Gráfico 3
ggplot(datos_simulados, aes(x = X3, y = X1)) +
geom_point(color = "red", size = 3) +
labs(title = "Gráfico X3 vs X1",
x = "X3", y = "X1") +
theme_minimal()
medias <- c(2, 5, 1.2)
varianzas_covarianzas <- matrix(c(1, 0.8, 0.7,
0.8, 1.1, 0.9,
0.7, 0.9, 1.3), byrow = TRUE, ncol = 3)
n <- 100
datos_simulados_2 <- mvrnorm(n, medias_2, varianzas_covarianzas_2) %>% data.frame()
n <- 100
datos_simulados_2 <- mvrnorm(n, medias_2, varianzas_covarianzas_2) %>% data.frame()
n <- 100
datos_simulados_2 <- mvrnorm(n, medias_2, varianzas_covarianzas_2) %>% data.frame()
medias2 <- c(2, 5, 1.2)
varianzas_covarianzas <- matrix(c(1, 0.8, 0.7,
0.8, 1.1, 0.9,
0.7, 0.9, 1.3), byrow = TRUE, ncol = 3)
n <- 100
datos_simulados_2 <- mvrnorm(n, medias_2, varianzas_covarianzas_2) %>% data.frame()
medias2 <- c(2, 5, 1.2)
varianzas_covarianzas_2 <- matrix(c(1, 0.8, 0.7,
0.8, 1.1, 0.9,
0.7, 0.9, 1.3), byrow = TRUE, ncol = 3)
n <- 100
datos_simulados_2 <- mvrnorm(n, medias_2, varianzas_covarianzas_2) %>% data.frame()
medias_2 <- c(2, 5, 1.2)
varianzas_covarianzas_2 <- matrix(c(1, 0.8, 0.7,
0.8, 1.1, 0.9,
0.7, 0.9, 1.3), byrow = TRUE, ncol = 3)
n <- 100
datos_simulados_2 <- mvrnorm(n, medias_2, varianzas_covarianzas_2) %>% data.frame()
apply(datos_simulados_2, 2, mean)
cor(datos_simulados)
datos_simulados1[, 'grupo'] <- 'G1'
n <- 100
datos_simulados1 <- mvrnorm(n, medias, varianzas_covarianzas) %>%  data.frame()
datos_kmeans
#Simular otro conjunto de datos pero ahora con medias
medias_2 <- c(2, 5, 1.2)
varianzas_covarianzas_2 <- matrix(c(1, 0.8, 0.7,
0.8, 1.1, 0.9,
0.7, 0.9, 1.3), byrow = TRUE, ncol = 3)
n <- 100
datos_simulados_2 <- mvrnorm(n, medias_2, varianzas_covarianzas_2) %>% data.frame()
apply(datos_simulados_2, 2, mean)
cor(datos_simulados)
datos_simulados1[, 'grupo'] <- 'G1'
datos_simulados_2[, 'grupo'] <- 'G2'
datos_kmeans <- bind_rows(datos_simulados1, datos_simulados_2)
datos_kmeans
# Mostrar un resumen del resultado
summary(pca_resultado)
getwd()
setwd("C:/Users/sofia/Documents/GitHub/AEDenso/Indices/Educacion/src/")
getwd()
source("../src/componentes_principales.R")
getwd()
setwd("C:/Users/sofia/Documents/GitHub/AEDenso/Indices/Educacion/src/")
source("../src/config.R")
source("../src/reader.R")
source("../src/preprocesor.R")
source("../src/config.R")
source("../src/funciones.R")
source("../src/reader.R")
source("../src/preprocesor.R")
source("../src/componentes_principales.R")
biplot(pca_resultado, scale=0)
# Graficar
ggplot(data_paises, aes(x = PC1, y = PC2, label = Country)) +
geom_point() +
geom_text(size = 3, vjust = 1.5) +  # Agregar etiquetas de países
labs(x = "Componente Principal 1", y = "Componente Principal 2", title = "Gráfico de Dispersión de Países en ACP")
# Mostrar un resumen del resultado
summary(pca_resultado)
plot(pca_resultado,type="l")
# Interpretacion APC a nivel pais -----------------------------------------
# Calcular loadings de países en los componentes principales
loadings_paises <- pca_resultado$rotation[, 1:2]
# Crear un dataframe con los loadings de los países
data_paises <- as.data.frame(loadings_paises)
data_paises$Country <- rownames(data_paises)  # Agregar nombres de países como columna
# Graficar
ggplot(data_paises, aes(x = PC1, y = PC2, label = Country)) +
geom_point() +
geom_text(size = 3, vjust = 1.5) +  # Agregar etiquetas de países
labs(x = "Componente Principal 1", y = "Componente Principal 2", title = "Gráfico de Dispersión de Países en ACP")
# PCA ---------------------------------------------------------------------
# Eliminar filas con valores NA
datos_limpios <- na.omit(datos_seleccionados)
# Estandarizar los datos limpios
datos_estandarizados <- scale(datos_limpios)
# Realizar el PCA
pca_resultado <- prcomp(datos_estandarizados, center = TRUE, scale. = TRUE)
# Mostrar un resumen del resultado
summary(pca_resultado)
plot(pca_resultado,type="l")
biplot(pca_resultado, scale=0)
# Interpretacion APC a nivel pais -----------------------------------------
# Calcular loadings de países en los componentes principales
loadings_paises <- pca_resultado$rotation[, 1:2]
# Graficar
ggplot(data_paises, aes(x = PC1, y = PC2, label = Country)) +
geom_point() +
geom_text(size = 3, vjust = 1.5) +  # Agregar etiquetas de países
labs(x = "Componente Principal 1", y = "Componente Principal 2", title = "Gráfico de Dispersión de Países en ACP")
# Graficas ----------------------------------------------------------------
#
plot(pca_resultado,type="l")
# Crear un dataframe con los loadings de los países
data_paises <- as.data.frame(loadings_paises)
data_paises$Country <- rownames(data_paises)  # Agregar nombres de países como columna
loadings_paises
biplot(pca_resultado, scale=0)
plot(pca_resultado,type="l")
datos_limpios
View(datos_limpios)
pc1 -> apply(pca_resultado$rotation[,1]*datos_limpios,1,sum)
pc1 -> apply(pca_resultado$rotation[,1]*datos_limpios,1,sum)
apply(pca_resultado$rotation[,1]*datos_limpios,1,sum)
View(datos_limpios)
pc1 <- apply(pca_resultado$rotation[,1]*datos_limpios,1,sum)
View(datos_limpios)
pc1
pc2 <- apply(pca_resultado$rotation[,2]*datos_limpios,1,sum)
apply(pca_resultado$rotation[,2]*datos_limpios,1,sum)
pc2 <- apply(pca_resultado$rotation[,2]*datos_limpios,1,sum)
datos_limpios$pc1 <- pc1
datos_limpios$pc2 <- pc2
View(datos_limpios)
# Mostrar un resumen del resultado y su grafica
summary(pca_resultado)
# Calcular loadings de países en los componentes principales
loadings_paises <- pca_resultado$rotation[, 1:2]
loadings_paises
cor(datos_limpios$pc1,datos_limpios$pc2)
plot(datos_limpios$pc1,datos_limpios$pc2)
getwd()
setwd("C:/Users/sofia/Documents/GitHub/AEDenso/Indices/MedioAmbiente/src/")
getwd()
setwd("C:/Users/sofia/Documents/GitHub/AEDenso/Indices/MedioAmbiente/src/")
source("../src/reader.R")
setwd("C:/Users/sofia/Documents/GitHub/AEDenso/Indices/MedioAmbiente/src/")
source("../src/reader.R")
#Emisiones co2 per capita toneladas
emisiones_co2 <- read.csv("../input/MedioAmbiente/emisiones_co2_per_capita_toneladas.csv", skip=4)
source("../src/funciones.R")
source(("../src/preprocesor.R"))
# Suponiendo que ya tienes las tablas rep_porcentaje_inversion, rep_alfabetizacion_total, etc.
# Crear una lista con todas las tablas
tablas <- list(
rep_porcentaje_inversion,
rep_alfabetizacion_total,
rep_proporcion_maestro_estudiantes,
rep_inscripcion_primaria,
rep_inscripcion_secundaria,
rep_porcentaje_maestros_primaria
)
# Crear una lista con todos los valores representativos
valores_representativos <- list(
rep_agua_dulce,
rep_areas_protegidas,
rep_energia_renovable,
rep_energia_fosil,
rep_emisiones_co2
)
# Crear una lista con todos los valores representativos
tablas <- list(
rep_agua_dulce,
rep_areas_protegidas,
rep_energia_renovable,
rep_energia_fosil,
rep_emisiones_co2
)
# Usar Reduce y merge para unir todas las tablas mediante las columnas Country.Code y Country.Name
tabla_unida <- Reduce(function(x, y) merge(x, y, by = c("Country.Code", "Country.Name"), all = TRUE), tablas)
tabla_unida <- as.data.frame(tabla_unida)
# Establecer Country.Code como nombres de fila
rownames(tabla_unida) <- tabla_unida$Country.Code
# Eliminar la columna Country.Code si ya no la necesitas
tabla_unida <- tabla_unida[ , !names(tabla_unida) %in% "Country.Code"]
# Mostrar las primeras filas para verificar
head(tabla_unida)
View(tabla_unida)
View(tabla_unida)
# Seleccionar las columnas de la 2 a la 6
datos_seleccionados <- tabla_unida[, 2:6]
# Calcular la matriz de correlaciones
matriz_correlaciones <- cor(datos_seleccionados, use = "complete.obs")
# PCA ---------------------------------------------------------------------
# Eliminar filas con valores NA
datos_limpios <- na.omit(datos_seleccionados)
# Estandarizar los datos limpios
datos_estandarizados <- scale(datos_limpios)
# Realizar el PCA
pca_resultado <- prcomp(datos_estandarizados, center = TRUE, scale. = TRUE)
# Mostrar un resumen del resultado y su grafica
summary(pca_resultado)
plot(pca_resultado,type="l")
#Mostrar resumen y vectores
biplot(pca_resultado, scale=0)
# Calcular loadings de países en los componentes principales
loadings_paises <- pca_resultado$rotation[, 1:2]
# Crear un dataframe con los loadings de los países
data_paises <- as.data.frame(loadings_paises)
data_paises$Country <- rownames(data_paises)  # Agregar nombres de países como columna
# Graficar
ggplot(data_paises, aes(x = PC1, y = PC2, label = Country)) +
geom_point() +
geom_text(size = 3, vjust = 1.5) +  # Agregar etiquetas de países
labs(x = "Componente Principal 1", y = "Componente Principal 2", title = "Gráfico de Dispersión de Países en ACP")
# Crear una lista con todos los valores representativos
tablas <- list(
rep_agua_dulce,
#rep_areas_protegidas,
rep_energia_renovable,
rep_energia_fosil,
rep_emisiones_co2
)
# Usar Reduce y merge para unir todas las tablas mediante las columnas Country.Code y Country.Name
tabla_unida <- Reduce(function(x, y) merge(x, y, by = c("Country.Code", "Country.Name"), all = TRUE), tablas)
tabla_unida <- as.data.frame(tabla_unida)
# Establecer Country.Code como nombres de fila
rownames(tabla_unida) <- tabla_unida$Country.Code
# Eliminar la columna Country.Code si ya no la necesitas
tabla_unida <- tabla_unida[ , !names(tabla_unida) %in% "Country.Code"]
# Mostrar las primeras filas para verificar
head(tabla_unida)
# Seleccionar las columnas de la 2 a la 6
datos_seleccionados <- tabla_unida[, 2:6]
# Calcular la matriz de correlaciones
matriz_correlaciones <- cor(datos_seleccionados, use = "complete.obs")
# PCA ---------------------------------------------------------------------
# Eliminar filas con valores NA
datos_limpios <- na.omit(datos_seleccionados)
# Estandarizar los datos limpios
datos_estandarizados <- scale(datos_limpios)
# Realizar el PCA
pca_resultado <- prcomp(datos_estandarizados, center = TRUE, scale. = TRUE)
# Mostrar un resumen del resultado y su grafica
summary(pca_resultado)
plot(pca_resultado,type="l")
# Seleccionar las columnas de la 2 a la 6
datos_seleccionados <- tabla_unida[, 2:5]
# Calcular la matriz de correlaciones
matriz_correlaciones <- cor(datos_seleccionados, use = "complete.obs")
# PCA ---------------------------------------------------------------------
# Eliminar filas con valores NA
datos_limpios <- na.omit(datos_seleccionados)
# Estandarizar los datos limpios
datos_estandarizados <- scale(datos_limpios)
# Realizar el PCA
pca_resultado <- prcomp(datos_estandarizados, center = TRUE, scale. = TRUE)
# Mostrar un resumen del resultado y su grafica
summary(pca_resultado)
plot(pca_resultado,type="l")
#Mostrar resumen y vectores
biplot(pca_resultado, scale=0)
# Calcular loadings de países en los componentes principales
loadings_paises <- pca_resultado$rotation[, 1:2]
# Crear un dataframe con los loadings de los países
data_paises <- as.data.frame(loadings_paises)
data_paises$Country <- rownames(data_paises)  # Agregar nombres de países como columna
# Graficar
ggplot(data_paises, aes(x = PC1, y = PC2, label = Country)) +
geom_point() +
geom_text(size = 3, vjust = 1.5) +  # Agregar etiquetas de países
labs(x = "Componente Principal 1", y = "Componente Principal 2", title = "Gráfico de Dispersión de Países en ACP")
pc1 <- apply(pca_resultado$rotation[,1]*datos_limpios,1,sum)
pc2 <- apply(pca_resultado$rotation[,2]*datos_limpios,1,sum)
datos_limpios$pc1 <- pc1
datos_limpios$pc2 <- pc2
plot(datos_limpios$pc1,datos_limpios$pc2)
# Seleccionar las columnas de la 2 a la 6
datos_seleccionados <- tabla_unida[, 2:6]
# Calcular la matriz de correlaciones
matriz_correlaciones <- cor(datos_seleccionados, use = "complete.obs")
matriz_correlaciones
View(matriz_correlaciones)
# Crear una lista con todos los valores representativos
tablas <- list(
#rep_agua_dulce,
#rep_areas_protegidas,
#rep_energia_renovable,
rep_energia_fosil,
rep_emisiones_co2
)
# Usar Reduce y merge para unir todas las tablas mediante las columnas Country.Code y Country.Name
tabla_unida <- Reduce(function(x, y) merge(x, y, by = c("Country.Code", "Country.Name"), all = TRUE), tablas)
tabla_unida <- as.data.frame(tabla_unida)
# Establecer Country.Code como nombres de fila
rownames(tabla_unida) <- tabla_unida$Country.Code
# Eliminar la columna Country.Code si ya no la necesitas
tabla_unida <- tabla_unida[ , !names(tabla_unida) %in% "Country.Code"]
# Mostrar las primeras filas para verificar
head(tabla_unida)
View(tabla_unida)
# Crear una lista con todos los valores representativos
tablas <- list(
rep_agua_dulce,
rep_areas_protegidas,
rep_energia_renovable,
#rep_energia_fosil,
#rep_emisiones_co2
)
# Crear una lista con todos los valores representativos
tablas <- list(
rep_agua_dulce,
rep_areas_protegidas,
rep_energia_renovable,
#rep_energia_fosil,
#rep_emisiones_co2
)
getwd()
setwd("C:/Users/sofia/Documents/GitHub/AEDenso/Indices/MedioAmbiente/src/")
source("../src/reader.R")
source("../src/funciones.R")
source(("../src/preprocesor.R"))
View(tabla_unida)
# Crear una lista con todos los valores representativos
tablas <- list(
rep_agua_dulce,
rep_areas_protegidas,
rep_energia_renovable,
#rep_energia_fosil,
#rep_emisiones_co2
)
# Usar Reduce y merge para unir todas las tablas mediante las columnas Country.Code y Country.Name
tabla_unida <- Reduce(function(x, y) merge(x, y, by = c("Country.Code", "Country.Name"), all = TRUE), tablas)
tabla_unida <- as.data.frame(tabla_unida)
# Establecer Country.Code como nombres de fila
rownames(tabla_unida) <- tabla_unida$Country.Code
# Eliminar la columna Country.Code si ya no la necesitas
tabla_unida <- tabla_unida[ , !names(tabla_unida) %in% "Country.Code"]
# Mostrar las primeras filas para verificar
head(tabla_unida)
View(tablas)
# Crear una lista con todos los valores representativos
tablas <- list(
rep_agua_dulce,
rep_areas_protegidas,
rep_energia_renovable
#rep_energia_fosil,
#rep_emisiones_co2
)
# Usar Reduce y merge para unir todas las tablas mediante las columnas Country.Code y Country.Name
tabla_unida <- Reduce(function(x, y) merge(x, y, by = c("Country.Code", "Country.Name"), all = TRUE), tablas)
tabla_unida <- as.data.frame(tabla_unida)
# Establecer Country.Code como nombres de fila
rownames(tabla_unida) <- tabla_unida$Country.Code
# Eliminar la columna Country.Code si ya no la necesitas
tabla_unida <- tabla_unida[ , !names(tabla_unida) %in% "Country.Code"]
# Mostrar las primeras filas para verificar
head(tabla_unida)
# Seleccionar las columnas de la 2 a la 6
datos_seleccionados <- tabla_unida[, 2:4]
# Calcular la matriz de correlaciones
matriz_correlaciones <- cor(datos_seleccionados, use = "complete.obs")
View(matriz_correlaciones)
# Crear una lista con todos los valores representativos
tablas <- list(
#rep_agua_dulce,
#rep_areas_protegidas,
#rep_energia_renovable
rep_energia_fosil,
rep_emisiones_co2
)
# Usar Reduce y merge para unir todas las tablas mediante las columnas Country.Code y Country.Name
tabla_unida <- Reduce(function(x, y) merge(x, y, by = c("Country.Code", "Country.Name"), all = TRUE), tablas)
tabla_unida <- as.data.frame(tabla_unida)
# Establecer Country.Code como nombres de fila
rownames(tabla_unida) <- tabla_unida$Country.Code
# Eliminar la columna Country.Code si ya no la necesitas
tabla_unida <- tabla_unida[ , !names(tabla_unida) %in% "Country.Code"]
# Mostrar las primeras filas para verificar
head(tabla_unida)
# Seleccionar las columnas de la 2 a la 6
datos_seleccionados <- tabla_unida[, 2:3]
# Calcular la matriz de correlaciones
matriz_correlaciones <- cor(datos_seleccionados, use = "complete.obs")
View(matriz_correlaciones)
getwd()
getwd()
