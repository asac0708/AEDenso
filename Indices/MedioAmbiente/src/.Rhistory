library(dplyr)
library(tidyr)
library(readr)
library(ggplot2)
getwd()
setwd("C:/Users/prestamour/Documents/GitHub/AEDenso/Indices/AnalisisConjunto/")
tabla_educacion <- read.csv("./input/tabla_educacion.csv")
tabla_economia <- read.csv("./input/tabla_economia.csv")
tabla_ambiente <- read.csv("./input/datos_ambiental.csv")
region_codes <- read_delim('./input/UNcodes.csv', delim = ';')
#Tablas solo con los indices
# Seleccionando la primera y las dos ÃƒÂºltimas columnas de cada tabla
tabla_educacion <- tabla_educacion[, c(1, ncol(tabla_educacion)-1, ncol(tabla_educacion))]
tabla_economia <- tabla_economia[, c(1, ncol(tabla_economia)-1, ncol(tabla_economia))]
tabla_ambiente <- tabla_ambiente[, c(1, ncol(tabla_ambiente)-1, ncol(tabla_ambiente))]
# Unir las tablas mediante la primera columna
merged_table <- merge(tabla_educacion, tabla_economia, by = "X",all=TRUE)
merged_table <- merge(merged_table, tabla_ambiente, by = "X",all=TRUE)
#Regiones
colnames(region_codes)
region_codes <- region_codes[, c("ISO-alpha3 Code", "Sub-region Name", "Region Name")]
# Unir las tablas mediante "ISO-alpha3 Code" y "X"
merged_table <- merge(merged_table, region_codes, by.x = "X", by.y = "ISO-alpha3 Code", all.x = TRUE)
# Filtrar NA en pc1_educacion, pc2_educacion y Region Name
merged_table_filtered_education <- merged_table[complete.cases(merged_table[, c("pc1_educacion", "pc2_educacion", "Sub-region Name","Region Name")]),]
# Crear la grÃƒÂ¡fica de dispersiÃƒÂ³n pintado por region
ggplot(data = merged_table_filtered_education, aes(x = pc1_educacion, y = pc2_educacion, color = `Sub-region Name`)) +
geom_point() +
labs(x = "PC1 EducaciÃƒÂ³n", y = "PC2 EducaciÃƒÂ³n", title = "GrÃƒÂ¡fico PC1 vs PC2 EducaciÃƒÂ³n por RegiÃƒÂ³n")
library(dplyr)
library(tidyr)
library(readr)
library(ggplot2)
getwd()
setwd("C:/Users/sofia/Documents/GitHub/AEDenso/Indices/AnalisisConjunto/")
tabla_educacion <- read.csv("./input/tabla_educacion.csv")
tabla_economia <- read.csv("./input/tabla_economia.csv")
tabla_ambiente <- read.csv("./input/datos_ambiental.csv")
region_codes <- read_delim('./input/UNcodes.csv', delim = ';')
#Tablas solo con los indices
# Seleccionando la primera y las dos Ãºltimas columnas de cada tabla
tabla_educacion <- tabla_educacion[, c(1, ncol(tabla_educacion)-1, ncol(tabla_educacion))]
tabla_economia <- tabla_economia[, c(1, ncol(tabla_economia)-1, ncol(tabla_economia))]
tabla_ambiente <- tabla_ambiente[, c(1, ncol(tabla_ambiente)-1, ncol(tabla_ambiente))]
# Unir las tablas mediante la primera columna
merged_table <- merge(tabla_educacion, tabla_economia, by = "X",all=TRUE)
merged_table <- merge(merged_table, tabla_ambiente, by = "X",all=TRUE)
#Regiones
colnames(region_codes)
region_codes <- region_codes[, c("ISO-alpha3 Code", "Sub-region Name", "Region Name")]
# Unir las tablas mediante "ISO-alpha3 Code" y "X"
merged_table <- merge(merged_table, region_codes, by.x = "X", by.y = "ISO-alpha3 Code", all.x = TRUE)
# Filtrar NA en pc1_educacion, pc2_educacion y Region Name
merged_table_filtered_education <- merged_table[complete.cases(merged_table[, c("pc1_educacion", "pc2_educacion", "Sub-region Name","Region Name")]),]
# Crear la grÃ¡fica de dispersiÃ³n pintado por region
ggplot(data = merged_table_filtered_education, aes(x = pc1_educacion, y = pc2_educacion, color = `Sub-region Name`)) +
geom_point() +
labs(x = "PC1 EducaciÃ³n", y = "PC2 EducaciÃ³n", title = "GrÃ¡fico PC1 vs PC2 EducaciÃ³n por RegiÃ³n")
#Crear la grÃ¡fica de dispersion pintado por region
ggplot(data = merged_table_filtered_education, aes(x = pc1_educacion, y = pc2_educacion, color = `Region Name`)) +
geom_point() +
labs(x = "PC1 EducaciÃ³n", y = "PC2 EducaciÃ³n", title = "GrÃ¡fico PC1 vs PC2 EducaciÃ³n por RegiÃ³n")
# Crear la grÃ¡fica de dispersiÃ³n pintado por Sub-region Name
ggplot(data = merged_table_filtered_economy, aes(x = pc1_economia, y = pc2_economia, color = `Sub-region Name`)) +
geom_point() +
labs(x = "PC1 EconomÃ­a", y = "PC2 EconomÃ­a", title = "GrÃ¡fico PC1 vs PC2 EconomÃ­a por Sub-RegiÃ³n")
# Economia ----------------------------------------------------------------
# Filtrar NA en pc1_economia, pc2_economia, Sub-region Name y Region Name
merged_table_filtered_economy <- merged_table[complete.cases(merged_table[, c("pc1_economia", "pc2_economia", "Sub-region Name", "Region Name")]),]
# Crear la grÃ¡fica de dispersiÃ³n pintado por Sub-region Name
ggplot(data = merged_table_filtered_economy, aes(x = pc1_economia, y = pc2_economia, color = `Sub-region Name`)) +
geom_point() +
labs(x = "PC1 EconomÃ­a", y = "PC2 EconomÃ­a", title = "GrÃ¡fico PC1 vs PC2 EconomÃ­a por Sub-RegiÃ³n")
# Crear la grÃ¡fica de dispersiÃ³n pintado por Region Name
ggplot(data = merged_table_filtered_economy, aes(x = pc1_economia, y = pc2_economia, color = `Region Name`)) +
geom_point() +
labs(x = "PC1 EconomÃ­a", y = "PC2 EconomÃ­a", title = "GrÃ¡fico PC1 vs PC2 EconomÃ­a por RegiÃ³n")
# Ambiental ---------------------------------------------------------------
# Filtrar NA en pc1_ambiental, pc2_ambiental, Sub-region Name y Region Name
merged_table_filtered_ambiental <- merged_table[complete.cases(merged_table[, c("pc1_ambiental", "pc2_ambiental", "Sub-region Name", "Region Name")]),]
# Crear la grÃ¡fica de dispersiÃ³n pintado por Sub-region Name
ggplot(data = merged_table_filtered_ambiental, aes(x = pc1_ambiental, y = pc2_ambiental, color = `Sub-region Name`)) +
geom_point() +
labs(x = "PC1 Ambiental", y = "PC2 Ambiental", title = "GrÃ¡fico PC1 vs PC2 Ambiental por Sub-RegiÃ³n")
# Crear la grÃ¡fica de dispersiÃ³n pintado por Region Name
ggplot(data = merged_table_filtered_ambiental, aes(x = pc1_ambiental, y = pc2_ambiental, color = `Region Name`)) +
geom_point() +
labs(x = "PC1 Ambiental", y = "PC2 Ambiental", title = "GrÃ¡fico PC1 vs PC2 Ambiental por RegiÃ³n")
getwd()
setwd("C:/Users/sofia/Documents/GitHub/AEDenso/Indices/Educacion/src/")
setwd("C:/Users/prestamour/Documents/GitHub/AEDenso/Indices/Educacion/src/")
source("../src/config.R")
source("../src/funciones.R")
source("../src/reader.R")
source("../src/preprocesor.R")
source("../src/componentes_principales.R")
# Seleccionar las columnas de la 2 a la 7
datos_seleccionados <- tabla_unida[, 2:7]
# Calcular la matriz de correlaciones
matriz_correlaciones <- cor(datos_seleccionados, use = "complete.obs")
# PCA ---------------------------------------------------------------------
# Eliminar filas con valores NA
datos_limpios <- na.omit(datos_seleccionados)
# Estandarizar los datos limpios
datos_estandarizados <- scale(datos_limpios)
# Realizar el PCA
pca_resultado <- prcomp(datos_estandarizados, center = TRUE, scale. = TRUE)
# Mostrar un resumen del resultado y su grafica
summary(pca_resultado)
plot(pca_resultado,type="l")
# Calcular la matriz de correlaciones
matriz_correlaciones <- cor(datos_seleccionados, use = "complete.obs")
matriz_correlaciones
View(matriz_correlaciones)
View(matriz_correlaciones)
# Seleccionar las columnas de la 2 a la 7
datos_seleccionados <- tabla_unida[, 2:7]
# Calcular la matriz de correlaciones
matriz_correlaciones <- cor(datos_seleccionados, use = "complete.obs")
View(matriz_correlaciones)
# Mostrar un resumen del resultado y su grafica
summary(pca_resultado)
# Calcular loadings de paÃ­ses en los componentes principales
loadings_paises <- pca_resultado$rotation[, 1:2]
loadings_paises
source("../src/funciones.R")
source("../src/reader.R")
source("../src/preprocesor.R")
setwd("C:/Users/prestamour/Documents/GitHub/AEDenso/Indices/DesarrolloEconÃ³mico/src")
source("../src/funciones.R")
source("../src/reader.R")
source("../src/preprocesor.R")
# Seleccionar las columnas de la 2 a la 6
datos_seleccionados <- tabla_unida[,2:5]
# Calcular la matriz de correlaciones
matriz_correlaciones <- cor(datos_seleccionados, use = "complete.obs")
# PCA ---------------------------------------------------------------------
# Eliminar filas con valores NA
datos_limpios <- na.omit(datos_seleccionados)
# Estandarizar los datos limpios
datos_estandarizados <- scale(datos_limpios)
# Realizar el PCA
pca_resultado <- prcomp(datos_estandarizados, center = TRUE, scale. = TRUE)
# Mostrar un resumen del resultado y su grafica
summary(pca_resultado)
plot(pca_resultado,type="l")
# Calcular loadings de paÃƒ­ses en los componentes principales
loadings_paises <- pca_resultado$rotation[, 1:2]
loadings_paises
# Crear un dataframe con los loadings de los paÃƒ­ses
data_paises <- as.data.frame(loadings_paises)
data_paises$Country <- rownames(data_paises)  # Agregar nombres de paÃƒ­ses como columna
# Graficar
ggplot(data_paises, aes(x = PC1, y = PC2, label = Country)) +
geom_point() +
geom_text(size = 3, vjust = 1.5) +  # Agregar etiquetas de paÃƒ­ses
labs(x = "Componente Principal 1", y = "Componente Principal 2", title = "GrÃƒÂ¡fico de DispersiÃƒÂ³n de PaÃƒ­ses en ACP")
# Seleccionar las columnas de la 2 a la 6
datos_seleccionados <- tabla_unida[,2:5]
# Calcular la matriz de correlaciones
matriz_correlaciones <- cor(datos_seleccionados, use = "complete.obs")
# PCA ---------------------------------------------------------------------
# Eliminar filas con valores NA
datos_limpios <- na.omit(datos_seleccionados)
# Estandarizar los datos limpios
datos_estandarizados <- scale(datos_limpios)
# Realizar el PCA
pca_resultado <- prcomp(datos_estandarizados, center = TRUE, scale. = TRUE)
# Mostrar un resumen del resultado y su grafica
summary(pca_resultado)
plot(pca_resultado,type="l")
#Mostrar resumen y vectores
biplot(pca_resultado, scale=0)
# Calcular loadings de paÃ­ses en los componentes principales
loadings_paises <- pca_resultado$rotation[, 1:2]
loadings_paises
# Crear un dataframe con los loadings de los paÃ­ses
data_paises <- as.data.frame(loadings_paises)
data_paises$Country <- rownames(data_paises)  # Agregar nombres de paÃ­ses como columna
# Graficar
ggplot(data_paises, aes(x = PC1, y = PC2, label = Country)) +
geom_point() +
geom_text(size = 3, vjust = 1.5) +  # Agregar etiquetas de paÃ­ses
labs(x = "Componente Principal 1", y = "Componente Principal 2", title = "GrÃ¡fico de DispersiÃ³n de PaÃ­ses en ACP")
# Mostrar un resumen del resultado y su grafica
summary(pca_resultado)
setwd("C:/Users/prestamour/Documents/GitHub/AEDenso/Indices/MedioAmbiente/src/")
source("../src/reader.R")
source("../src/funciones.R")
source(("../src/preprocesor.R"))
# Correlaciones -----------------------------------------------------------
tabla_unida$Country.Name <- NULL
# Seleccionar las columnas de la 2 a la 6
datos_seleccionados <- tabla_unida
# Calcular la matriz de correlaciones
matriz_correlaciones <- cor(datos_seleccionados, use = "complete.obs")
# PCA ---------------------------------------------------------------------
# Eliminar filas con valores NA
datos_limpios <- na.omit(datos_seleccionados)
# Estandarizar los datos limpios
datos_estandarizados <- scale(datos_limpios)
# Realizar el PCA
pca_resultado <- prcomp(datos_estandarizados, center = TRUE, scale. = TRUE)
# Mostrar un resumen del resultado y su grafica
summary(pca_resultado)
plot(pca_resultado,type="l")
#Mostrar resumen y vectores
biplot(pca_resultado, scale=0)
# Calcular loadings de paÃƒ­ses en los componentes principales
loadings_paises <- pca_resultado$rotation[, 1:2]
# Crear un dataframe con los loadings de los paÃƒ­ses
data_paises <- as.data.frame(loadings_paises)
data_paises$Country <- rownames(data_paises)  # Agregar nombres de paÃƒ­ses como columna
# Graficar
ggplot(data_paises, aes(x = PC1, y = PC2, label = Country)) +
geom_point() +
geom_text(size = 3, vjust = 1.5) +  # Agregar etiquetas de paÃƒ­ses
labs(x = "Componente Principal 1", y = "Componente Principal 2", title = "GrÃƒÂ¡fico de DispersiÃƒÂ³n de PaÃƒ­ses en ACP")
plot(datos_limpios$pc1,datos_limpios$pc2)
# Graficar
ggplot(data_paises, aes(x = PC1, y = PC2, label = Country)) +
geom_point() +
geom_text(size = 3, vjust = 1.5) +  # Agregar etiquetas de paÃƒ­ses
labs(x = "Componente Principal 1", y = "Componente Principal 2", title = "GrÃƒÂ¡fico de DispersiÃƒÂ³n de PaÃƒ­ses en ACP")
pc1_ambiental <- apply(pca_resultado$rotation[,1]*datos_limpios,1,sum)
pc2_ambiental <- apply(pca_resultado$rotation[,2]*datos_limpios,1,sum)
datos_limpios$pc1_ambiental <- pc1_ambiental
datos_limpios$pc2_ambiental <- pc2_ambiental
plot(datos_limpios$pc1,datos_limpios$pc2)
# Graficar
ggplot(data_paises, aes(x = PC1, y = PC2, label = Country)) +
geom_point() +
geom_text(size = 3, vjust = 1.5) +  # Agregar etiquetas de paÃƒ­ses
labs(x = "Componente Principal 1", y = "Componente Principal 2", title = "GrÃƒÂ¡fico de DispersiÃƒÂ³n de PaÃƒ­ses en ACP")
