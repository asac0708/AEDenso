library(MAAS)
library(MAAS)
library(MASS)
library(dplyr)
medias <- c(10,15,12)
varianzas_covarianzas <- matrix(c(10,8,7,
8,11,9,
7,9,15), byrow = TRUE, ncol = 3)
n <- 10
datos_simulados <- mvrnorm(n, medias, varianzas_covarianzas)
apply(datos_simulados,2, mean)
cor(datos_simulados)
library(MASS)
library(dplyr)
medias <- c(10,15,12)
varianzas_covarianzas <- matrix(c(10,8,7,
8,11,9,
7,9,15), byrow = TRUE, ncol = 3)
n <- 10
datos_simulados <- mvrnorm(n, medias, varianzas_covarianzas) %>%  data.frame()
apply(datos_simulados,2, mean)
cor(datos_simulados)
datos_simulado
datos_simulados <- mvrnorm(n, medias, varianzas_covarianzas) %>%  data.frame()
library(MASS)
library(dplyr)
medias <- c(10,15,12)
varianzas_covarianzas <- matrix(c(10,8,7,
8,11,9,
7,9,15), byrow = TRUE, ncol = 3)
n <- 10
datos_simulados <- mvrnorm(n, medias, varianzas_covarianzas) %>%  data.frame()
apply(datos_simulados,2, mean)
cor(datos_simulados)
library(MASS)
library(dplyr)
medias <- c(10,15,12)
varianzas_covarianzas <- matrix(c(10,8,7,
8,11,9,
7,9,15), byrow = TRUE, ncol = 3)
n <- 10
datos_simulados <- mvrnorm(n, medias, varianzas_covarianzas) %>%  data.frame()
apply(datos_simulados,2, mean)
cor(datos_simulados)
library(MASS)
library(dplyr)
medias <- c(10,15,12)
varianzas_covarianzas <- matrix(c(10,8,7,
8,11,9,
7,9,15), byrow = TRUE, ncol = 3)
n <- 10
datos_simulados <- mvrnorm(n, medias, varianzas_covarianzas) %>%  data.frame()
apply(datos_simulados,2, mean)
cor(datos_simulados)
datos_simulados
datos_simulados
# Gráfico 1
ggplot(datos_simulados, aes(x = X1, y = X2)) +
geom_point(color = "blue", size = 3) +
labs(title = "Gráfico X1 vs X2",
x = "X1", y = "X2") +
theme_minimal()
library(ggplot2)
# Gráfico 1
ggplot(datos_simulados, aes(x = X1, y = X2)) +
geom_point(color = "blue", size = 3) +
labs(title = "Gráfico X1 vs X2",
x = "X1", y = "X2") +
theme_minimal()
library(ggplot2)
library(ggplot2)
# Gráfico 1
ggplot(datos_simulados, aes(x = X1, y = X2)) +
geom_point(color = "blue", size = 3) +
labs(title = "Gráfico X1 vs X2",
x = "X1", y = "X2") +
theme_minimal()
datos_simulados <- mvrnorm(n, medias, varianzas_covarianzas) %>%  data.frame()
apply(datos_simulados,2, mean)
cor(datos_simulados)
# Gráfico 1
ggplot(datos_simulados, aes(x = X1, y = X2)) +
geom_point(color = "blue", size = 3) +
labs(title = "Gráfico X1 vs X2",
x = "X1", y = "X2") +
theme_minimal()
n <- 100
datos_simulados <- mvrnorm(n, medias, varianzas_covarianzas) %>%  data.frame()
apply(datos_simulados,2, mean)
cor(datos_simulados)
# Gráfico 1
ggplot(datos_simulados, aes(x = X1, y = X2)) +
geom_point(color = "blue", size = 3) +
labs(title = "Gráfico X1 vs X2",
x = "X1", y = "X2") +
theme_minimal()
# Gráfico 2
ggplot(datos_simulados, aes(x = X2, y = X3)) +
geom_point(color = "green", size = 3) +
labs(title = "Gráfico X2 vs X3",
x = "X2", y = "X3") +
theme_minimal()
# Gráfico 3
ggplot(datos_simulados, aes(x = X3, y = X1)) +
geom_point(color = "red", size = 3) +
labs(title = "Gráfico X3 vs X1",
x = "X3", y = "X1") +
theme_minimal()
medias <- c(2, 5, 1.2)
varianzas_covarianzas <- matrix(c(1, 0.8, 0.7,
0.8, 1.1, 0.9,
0.7, 0.9, 1.3), byrow = TRUE, ncol = 3)
n <- 100
datos_simulados_2 <- mvrnorm(n, medias_2, varianzas_covarianzas_2) %>% data.frame()
n <- 100
datos_simulados_2 <- mvrnorm(n, medias_2, varianzas_covarianzas_2) %>% data.frame()
n <- 100
datos_simulados_2 <- mvrnorm(n, medias_2, varianzas_covarianzas_2) %>% data.frame()
medias2 <- c(2, 5, 1.2)
varianzas_covarianzas <- matrix(c(1, 0.8, 0.7,
0.8, 1.1, 0.9,
0.7, 0.9, 1.3), byrow = TRUE, ncol = 3)
n <- 100
datos_simulados_2 <- mvrnorm(n, medias_2, varianzas_covarianzas_2) %>% data.frame()
medias2 <- c(2, 5, 1.2)
varianzas_covarianzas_2 <- matrix(c(1, 0.8, 0.7,
0.8, 1.1, 0.9,
0.7, 0.9, 1.3), byrow = TRUE, ncol = 3)
n <- 100
datos_simulados_2 <- mvrnorm(n, medias_2, varianzas_covarianzas_2) %>% data.frame()
medias_2 <- c(2, 5, 1.2)
varianzas_covarianzas_2 <- matrix(c(1, 0.8, 0.7,
0.8, 1.1, 0.9,
0.7, 0.9, 1.3), byrow = TRUE, ncol = 3)
n <- 100
datos_simulados_2 <- mvrnorm(n, medias_2, varianzas_covarianzas_2) %>% data.frame()
apply(datos_simulados_2, 2, mean)
cor(datos_simulados)
datos_simulados1[, 'grupo'] <- 'G1'
n <- 100
datos_simulados1 <- mvrnorm(n, medias, varianzas_covarianzas) %>%  data.frame()
datos_kmeans
#Simular otro conjunto de datos pero ahora con medias
medias_2 <- c(2, 5, 1.2)
varianzas_covarianzas_2 <- matrix(c(1, 0.8, 0.7,
0.8, 1.1, 0.9,
0.7, 0.9, 1.3), byrow = TRUE, ncol = 3)
n <- 100
datos_simulados_2 <- mvrnorm(n, medias_2, varianzas_covarianzas_2) %>% data.frame()
apply(datos_simulados_2, 2, mean)
cor(datos_simulados)
datos_simulados1[, 'grupo'] <- 'G1'
datos_simulados_2[, 'grupo'] <- 'G2'
datos_kmeans <- bind_rows(datos_simulados1, datos_simulados_2)
datos_kmeans
getwd()
setwd("C:/Users/sofia/Documents/GitHub/AEDenso/Indices/MedioAmbiente/src/")
source("../src/reader.R")
source("../src/funciones.R")
source(("../src/preprocesor.R"))
View(tabla_unida)
# Seleccionar las columnas de la 2 a la 6
datos_seleccionados <- tabla_unida
# Calcular la matriz de correlaciones
matriz_correlaciones <- cor(datos_seleccionados, use = "complete.obs")
# PCA ---------------------------------------------------------------------
# Eliminar filas con valores NA
datos_limpios <- na.omit(datos_seleccionados)
# Estandarizar los datos limpios
datos_estandarizados <- scale(datos_limpios)
# Realizar el PCA
pca_resultado <- prcomp(datos_estandarizados, center = TRUE, scale. = TRUE)
# Mostrar un resumen del resultado y su grafica
summary(pca_resultado)
plot(pca_resultado,type="l")
#Mostrar resumen y vectores
biplot(pca_resultado, scale=0)
# Calcular loadings de países en los componentes principales
loadings_paises <- pca_resultado$rotation[, 1:2]
# Crear un dataframe con los loadings de los países
data_paises <- as.data.frame(loadings_paises)
data_paises$Country <- rownames(data_paises)  # Agregar nombres de países como columna
# Graficar
ggplot(data_paises, aes(x = PC1, y = PC2, label = Country)) +
geom_point() +
geom_text(size = 3, vjust = 1.5) +  # Agregar etiquetas de países
labs(x = "Componente Principal 1", y = "Componente Principal 2", title = "Gráfico de Dispersión de Países en ACP")
datos_limpios$pc1_ambiental <- pc1_ambiental
datos_limpios$pc2_ambiental <- pc2_ambiental
pc1_ambiental <- apply(pca_resultado$rotation[,1]*datos_limpios,1,sum)
# Seleccionar las columnas de la 2 a la 6
datos_seleccionados <- tabla_unida
# Calcular la matriz de correlaciones
matriz_correlaciones <- cor(datos_seleccionados, use = "complete.obs")
# Seleccionar las columnas de la 2 a la 6
datos_seleccionados <- tabla_unida
# Calcular la matriz de correlaciones
matriz_correlaciones <- cor(datos_seleccionados, use = "complete.obs")
str(tabla_unida)
View(tabla_unida)
# Correlaciones -----------------------------------------------------------
tabla_unida$Country.Name <- NULL
# Seleccionar las columnas de la 2 a la 6
datos_seleccionados <- tabla_unida
# Calcular la matriz de correlaciones
matriz_correlaciones <- cor(datos_seleccionados, use = "complete.obs")
# PCA ---------------------------------------------------------------------
# Eliminar filas con valores NA
datos_limpios <- na.omit(datos_seleccionados)
# Estandarizar los datos limpios
datos_estandarizados <- scale(datos_limpios)
# Realizar el PCA
pca_resultado <- prcomp(datos_estandarizados, center = TRUE, scale. = TRUE)
# Mostrar un resumen del resultado y su grafica
summary(pca_resultado)
plot(pca_resultado,type="l")
#Mostrar resumen y vectores
biplot(pca_resultado, scale=0)
# Calcular loadings de países en los componentes principales
loadings_paises <- pca_resultado$rotation[, 1:2]
# Crear un dataframe con los loadings de los países
data_paises <- as.data.frame(loadings_paises)
data_paises$Country <- rownames(data_paises)  # Agregar nombres de países como columna
# Graficar
ggplot(data_paises, aes(x = PC1, y = PC2, label = Country)) +
geom_point() +
geom_text(size = 3, vjust = 1.5) +  # Agregar etiquetas de países
labs(x = "Componente Principal 1", y = "Componente Principal 2", title = "Gráfico de Dispersión de Países en ACP")
pc1_ambiental <- apply(pca_resultado$rotation[,1]*datos_limpios,1,sum)
pc2_ambiental <- apply(pca_resultado$rotation[,2]*datos_limpios,1,sum)
datos_limpios$pc1_ambiental <- pc1_ambiental
datos_limpios$pc2_ambiental <- pc2_ambiental
plot(datos_limpios$pc1,datos_limpios$pc2)
write.csv(datos, "datos_limpios.csv", row.names = FALSE)
write.csv(datos_limpios, "datos_ambiental.csv", row.names = FALSE)
getwd()
setwd("C:/Users/sofia/Documents/GitHub/AEDenso/Indices/AnalisisConjunto/")
tabla_educacion <- read.csv("../AnalisisConjunto/input/tabla_educacion.csv")
tabla_educacion <- read.csv("./input/tabla_educacion.csv")
tabla_economia <- read.csv("./input/tabla_economia.csv")
tabla_ambiente <- read.csv("./input/datos_ambiental.csv")
View(tabla_educacion)
View(tabla_economia)
View(tabla_ambiente)
View(tabla_ambiente)
getwd()
setwd("C:/Users/sofia/Documents/GitHub/AEDenso/Indices/Educacion/src/")
source("../src/config.R")
source("../src/funciones.R")
source("../src/reader.R")
source("../src/preprocesor.R")
# Seleccionar las columnas de la 2 a la 7
datos_seleccionados <- tabla_unida[, 2:7]
# Calcular la matriz de correlaciones
matriz_correlaciones <- cor(datos_seleccionados, use = "complete.obs")
# PCA ---------------------------------------------------------------------
# Eliminar filas con valores NA
datos_limpios <- na.omit(datos_seleccionados)
# Estandarizar los datos limpios
datos_estandarizados <- scale(datos_limpios)
# Realizar el PCA
pca_resultado <- prcomp(datos_estandarizados, center = TRUE, scale. = TRUE)
# Mostrar un resumen del resultado y su grafica
summary(pca_resultado)
plot(pca_resultado,type="l")
#Mostrar resumen y vectores
biplot(pca_resultado, scale=0)
# Calcular loadings de países en los componentes principales
loadings_paises <- pca_resultado$rotation[, 1:2]
# Crear un dataframe con los loadings de los países
data_paises <- as.data.frame(loadings_paises)
data_paises$Country <- rownames(data_paises)  # Agregar nombres de países como columna
# Graficar
ggplot(data_paises, aes(x = PC1, y = PC2, label = Country)) +
geom_point() +
geom_text(size = 3, vjust = 1.5) +  # Agregar etiquetas de países
labs(x = "Componente Principal 1", y = "Componente Principal 2", title = "Gráfico de Dispersión de Países en ACP")
pc1_educacion <- apply(pca_resultado$rotation[,1]*datos_limpios,1,sum)
pc2_educacion <- apply(pca_resultado$rotation[,2]*datos_limpios,1,sum)
datos_limpios$pc1_educacion <- pc1_educacion
datos_limpios$pc2_educacion <- pc2_educacion
plot(datos_limpios$pc1_educacion,datos_limpios$pc2_educacion)
# Exportar el dataset a un archivo CSV
write.csv(datos_limpios, "tabla_educacion.csv", row.names = TRUE)
getwd()
setwd("C:/Users/sofia/Documents/GitHub/AEDenso/Indices/DesarrolloEconómico/src")
source("../src/funciones.R")
source("../src/reader.R")
source("../src/preprocesor.R")
# Seleccionar las columnas de la 2 a la 6
datos_seleccionados <- tabla_unida[,2:5]
# Calcular la matriz de correlaciones
matriz_correlaciones <- cor(datos_seleccionados, use = "complete.obs")
# PCA ---------------------------------------------------------------------
# Eliminar filas con valores NA
datos_limpios <- na.omit(datos_seleccionados)
# Estandarizar los datos limpios
datos_estandarizados <- scale(datos_limpios)
# Realizar el PCA
pca_resultado <- prcomp(datos_estandarizados, center = TRUE, scale. = TRUE)
# Mostrar un resumen del resultado y su grafica
summary(pca_resultado)
plot(pca_resultado,type="l")
#Mostrar resumen y vectores
biplot(pca_resultado, scale=0)
# Calcular loadings de países en los componentes principales
loadings_paises <- pca_resultado$rotation[, 1:2]
loadings_paises
# Crear un dataframe con los loadings de los países
data_paises <- as.data.frame(loadings_paises)
data_paises$Country <- rownames(data_paises)  # Agregar nombres de países como columna
# Graficar
ggplot(data_paises, aes(x = PC1, y = PC2, label = Country)) +
geom_point() +
geom_text(size = 3, vjust = 1.5) +  # Agregar etiquetas de países
labs(x = "Componente Principal 1", y = "Componente Principal 2", title = "Gráfico de Dispersión de Países en ACP")
pc1_economia <- apply(pca_resultado$rotation[,1]*datos_limpios,1,sum)
pc2_economia <- apply(pca_resultado$rotation[,2]*datos_limpios,1,sum)
datos_limpios$pc1_economia <- pc1_economia
datos_limpios$pc2_economia <- pc2_economia
plot(datos_limpios$pc1_economia,datos_limpios$pc2_economia)
tabla_economia <- datos_limpios
write.csv(tabla_economia, "tabla_economia.csv", row.names = TRUE)
getwd()
setwd("C:/Users/sofia/Documents/GitHub/AEDenso/Indices/MedioAmbiente/src/")
source("../src/reader.R")
source("../src/funciones.R")
source(("../src/preprocesor.R"))
# Realizar el PCA
pca_resultado <- prcomp(datos_estandarizados, center = TRUE, scale. = TRUE)
# Mostrar un resumen del resultado y su grafica
summary(pca_resultado)
plot(pca_resultado,type="l")
#Mostrar resumen y vectores
biplot(pca_resultado, scale=0)
# Calcular loadings de países en los componentes principales
loadings_paises <- pca_resultado$rotation[, 1:2]
# Crear un dataframe con los loadings de los países
data_paises <- as.data.frame(loadings_paises)
# Correlaciones -----------------------------------------------------------
tabla_unida$Country.Name <- NULL
# Correlaciones -----------------------------------------------------------
tabla_unida$Country.Name <- NULL
# Seleccionar las columnas de la 2 a la 6
datos_seleccionados <- tabla_unida
# Calcular la matriz de correlaciones
matriz_correlaciones <- cor(datos_seleccionados, use = "complete.obs")
# PCA ---------------------------------------------------------------------
# Eliminar filas con valores NA
datos_limpios <- na.omit(datos_seleccionados)
# Estandarizar los datos limpios
datos_estandarizados <- scale(datos_limpios)
# Realizar el PCA
pca_resultado <- prcomp(datos_estandarizados, center = TRUE, scale. = TRUE)
# Mostrar un resumen del resultado y su grafica
summary(pca_resultado)
plot(pca_resultado,type="l")
#Mostrar resumen y vectores
biplot(pca_resultado, scale=0)
# Calcular loadings de países en los componentes principales
loadings_paises <- pca_resultado$rotation[, 1:2]
# Crear un dataframe con los loadings de los países
data_paises <- as.data.frame(loadings_paises)
data_paises$Country <- rownames(data_paises)  # Agregar nombres de países como columna
# Graficar
ggplot(data_paises, aes(x = PC1, y = PC2, label = Country)) +
geom_point() +
geom_text(size = 3, vjust = 1.5) +  # Agregar etiquetas de países
labs(x = "Componente Principal 1", y = "Componente Principal 2", title = "Gráfico de Dispersión de Países en ACP")
pc1_ambiental <- apply(pca_resultado$rotation[,1]*datos_limpios,1,sum)
pc2_ambiental <- apply(pca_resultado$rotation[,2]*datos_limpios,1,sum)
datos_limpios$pc1_ambiental <- pc1_ambiental
datos_limpios$pc2_ambiental <- pc2_ambiental
plot(datos_limpios$pc1,datos_limpios$pc2)
write.csv(datos_limpios, "datos_ambiental.csv", row.names = TRUE)
getwd()
setwd("C:/Users/sofia/Documents/GitHub/AEDenso/Indices/AnalisisConjunto/")
tabla_educacion <- read.csv("./input/tabla_educacion.csv")
tabla_economia <- read.csv("./input/tabla_economia.csv")
tabla_ambiente <- read.csv("./input/datos_ambiental.csv")
View(tabla_educacion)
View(tabla_economia)
View(tabla_ambiente)
